



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 1000000007;
    int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }



    public void solution(int all, int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        int k = fs.Int();
        if(k == 1){
            out.println(0);
            return;
        }

        int A[] = new int[n];
        for(int i = 0; i < n; i++) {
            A[i] = fs.Int();
            if(A[i] != -1)A[i]--;
        }

        int pre[][] = new int[m][n];
        for(int num = 0; num < m; num++) {
            int sum = 0;
            for(int j = 0; j < n; j++) {
                if(A[j]==-1||A[j]==num)sum++;
                pre[num][j] = sum;
            }
        }


        //can not have consecutive k equal numbers
        long sums[] = new long[n];
        long dp[][] = new long[n][m];
        if(A[0] == -1) {
            for(int i = 0; i < m; i++) {
                dp[0][i] = 1;
            }
            sums[0] = m;
        }else{
            dp[0][A[0]] = 1;
            sums[0] = 1;
        }



        for(int i = 1; i < n; i++){
            if(A[i] == -1) {
                for(int j = 0; j < m; j++) {
                    dp[i][j] = sums[i - 1];
                    if(i - k + 1 >= 0 && get(pre[j], i - k + 1, i) == k) {
                        if(i - k >= 0  ) {
                            dp[i][j] -= sums[i - k];
                            dp[i][j] += mod;
                            dp[i][j] %= mod;
                            dp[i][j] += dp[i - k][j];
                            dp[i][j] %= mod;
                        }else {
                            dp[i][j]--;
                            dp[i][j] += mod;
                            dp[i][j] %= mod;
                        }
                    }
                }

            }
            else{
                dp[i][A[i]] = sums[i - 1];
                if(i - k + 1 >= 0 && get(pre[A[i]], i - k + 1, i) == k) {
                    if(i - k + 1 >= 0 && get(pre[A[i]], i - k + 1, i) == k) {
                        if(i - k >= 0  ) {
                            dp[i][A[i]] -= sums[i - k];
                            dp[i][A[i]] += mod;
                            dp[i][A[i]] %= mod;
                            dp[i][A[i]] += dp[i - k][A[i]];
                            dp[i][A[i]] %= mod;
                        } else {
                            dp[i][A[i]]--;
                            dp[i][A[i]] += mod;
                            dp[i][A[i]] %= mod;
                        }
                    }
                }

            }

            for(int j = 0; j < m; j++) {
                sums[i] += dp[i][j];
                sums[i] %= mod;
            }
            //if(sums[i] == 0)break;
        }

        out.println(sums[n - 1]);
    }

    public int get(int A[], int l, int r) {
        if(l == 0)return A[r];
        return A[r] - A[l - 1];
    }


}





