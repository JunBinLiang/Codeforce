// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    int A[];
    public void solution() {

        int n =fs.Int();
        A=new int[n];
        read(A);
        int m = fs.Int();
        Seg seg = new Seg(0,n-1);
        Map<Integer,List<Integer>>f=new HashMap<>();
        for(int i = 0;i<A.length;i++){
            if(!f.containsKey(A[i]))f.put(A[i],new ArrayList<>());
            f.get(A[i]).add(i);
        }

        while(m>0){
            m--;
            int l = fs.Int()-1;
            int r = fs.Int()-1;
            int size = r - l + 1;
            int g = seg.query1(l,r);
            int same = 0;
            //how many number is [l : r] == g

            List<Integer>list=f.get(g);
            if(list!=null){
                int pos1 = -1;
                int pos2 = -1;
                int ll = 0, rr = list.size()-1;
                while(ll<=rr){
                    int mid = ll+(rr-ll)/2;
                    if(list.get(mid)>=l){
                        pos1 = mid;
                        rr = mid - 1;
                    }
                    else{
                        ll = mid + 1;
                    }
                }
                ll = 0; rr = list.size()-1;

                while(ll<=rr){
                    int mid = ll+(rr-ll)/2;
                    if(list.get(mid)<=r){
                        pos2 = mid;
                        ll = mid + 1;
                    }
                    else{
                        rr = mid - 1;
                    }
                }
                if(pos1!=-1&&pos2!=-1){
                    same = (pos2-pos1+1);
                }

                //System.out.println(g+" "+size+" "+pos1+" "+pos2);
            }

            out.println(size - same);
        }
    }

    public void read(int A[]){
        for(int i = 0;i<A.length;i++){
            A[i]=fs.Int();
        }
    }

    public int gcd(int num1, int num2) {
        if (num2 != 0){
            return gcd(num2, num1 % num2);
        } else{
            return num1;
        }
    }

    class Seg{
        int l,r;
        int val = 0;
        Seg left=null,right=null;
        int min = -1;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.val = gcd(left.val,right.val);
                this.min=Math.min(left.min,right.min);
            }else{
                min = val = A[l];
            }
        }

        public int query1(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return val;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query1(s,e);
            }
            else if(s>=mid+1){
                return right.query1(s,e);
            }else{
                return gcd(left.query1(s,mid),right.query1(mid+1,e));
            }
        }

        public int query2(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query2(s,e);
            }
            else if(s>=mid+1){
                return right.query2(s,e);
            }else{
                return Math.min(left.query2(s,mid),right.query2(mid+1,e));
            }
        }

    }


}


