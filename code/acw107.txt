// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        while(true){
            int n =Int();
            if(n==0)break;
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A);
        }

        int T=0;
        for(int t=0;t<T;t++){


            //Solution sol=new Solution(out);
            //sol.solution(m,k,A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000009;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }




    public void solution(int A[]) {
        List<Integer>list=new ArrayList<>();
        for(int i:A)list.add(i);
        Collections.sort(list);
        Map<Integer,Integer>f=new HashMap<>();
        int id = 0;
        for(int j:list){
            f.put(j,id++);
        }

        for(int i=0;i<A.length;i++){
            A[i]=f.get(A[i]);
        }


        int arr[]=new int[id+10];
        FenWick fen=new FenWick(arr);
        for(int i =0;i<A.length;i++){
            fen.update(A[i],1);
        }

        long res=0;
        for(int i =0;i<A.length;i++){
            int cur =A[i];
            if(cur!=0){
                res+=fen.sumRange(0,cur-1);
            }
            fen.update(A[i],-1);
        }
        out.println(res);

    }



    class FenWick {
        int tree[];//1-index based
        int A[];
        public FenWick(int[] A) {
            this.A=A;
            tree=new int[A.length+1];
            int sum=0;
        }

        public void update(int i, int val) {
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }

        public int sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }

        public int pre(int i){
            int sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }


}
















