// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        long fact[]=new long[1000000+10];
        int MOD=1000000007;
        fact[0]=fact[1]=1;
        for(int i=2;i<fact.length;i++){
            fact[i]=fact[i-1]*i;fact[i]%=MOD;
        }

        long D[]=new long[1000000+10];
        D[2]=1;
        D[1]=0;
        D[0]=1;
        for(int i=3;i<D.length;i++){
            D[i]=(i-1)*((D[i-1])+D[i-2]);
            D[i]%=MOD;
        }


        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();


            Solution sol=new Solution(out);
            sol.solution(fact,D,n,m);
        }
        out.close();

    }

    static long modInverse(long a, long m)
    {
        long m0 = m;
        long y = 0, x = 1;

        if (m == 1)
            return 0;

        while (a > 1) {
            // q is quotient
            long q = a / m;

            long t = m;

            // m is remainder now, process
            // same as Euclid's algo
            m = a % m;
            a = t;
            t = y;

            // Update x and y
            y = x - q * y;
            x = t;
        }

        // Make x positive
        if (x < 0)
            x += m0;

        return x;
    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }




    public void solution(long fact[],long D[],int n,int m) {
        long take = C(fact,n,m);
        long wrong=D[n-m];
        long res = (take*wrong)%MOD;
        out.println(res);

    }

    public long C(long fact[],int n,int m) {
        return fact[n]*Pow(fact[n-m],mod-2)%mod*Pow(fact[m],mod-2)%mod;
    }

    public long Pow(long a,long b){
        long res=1;
        long pow=a;
        for(int i=0;i<32;i++){
            if((b&(1<<i))!=0){
                res*=pow;
                res%=mod;
            }
            pow*=pow;
            pow%=mod;
        }
        return res;
    }
}


