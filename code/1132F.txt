// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            String s=Str();
            Solution sol1=new Solution(out);
            sol1.solution(s);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }

    int dp[][];
    public void solution(String s) {
        char A[]=s.toCharArray();
        int n =A.length;
        dp=new int[n][n];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        int res=dfs(A,0,n-1);
        out.println(res);
    }

    public int dfs(char A[],int l,int r){
        if(l>r){
            return 0;
        }

        if(dp[l][r]!=-1)return dp[l][r];
        int res=Integer.MAX_VALUE;
        res=Math.min(res,1+dfs(A,l+1,r));
        res=Math.min(res,1+dfs(A,l,r-1));

        for(int i=l+1;i<=r;i++){
            if(A[l]==A[i]){
                res=Math.min(res,dfs(A,l+1,i-1)+dfs(A,i,r));
            }
        }
        for(int i=r-1;i>=l;i--){
            if(A[i]==A[r]){
                res=Math.min(res,dfs(A,l,i)+dfs(A,i+1,r-1));
            }
        }

        dp[l][r]=res;
        return res;
    }


}
