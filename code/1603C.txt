#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 998244353;
int INF = INT_MAX;


int find(ve<int>& a, int val) {
  int res = -1;
  int l = 0, r = a.size() - 1;
  while(l <= r) {
    int mid = l + (r - l) / 2;
    if(val >= a[mid]) {
      res = mid;
      l = mid + 1;
    } else {
      r = mid - 1;
    }
  }
  return res;
}

int cal(int val, int split) {
  int x = val / split;
  return x;
}

ll lastdp[100000 + 5];
ll curdp[100000 + 5];

void solve(ve<int>& a, int T) {
  ll res = 0;
  int n = a.size();

  ve<int> pre;
  
  for(int i = 0; i < a.size(); i++) {
    if(i > 0) {
      if(a[i] < a[i - 1]) {
        int index = find(pre, a[i]);
        res += lastdp[index]; 
        res %= mod;
      } else {
        res += lastdp[pre.size() - 1];
        res %= mod;
      }
    }

    int val = a[i];
    ve<int> cur;
    for(int j = 1; j <= val; j++) {
      cur.pb(j);
      if(j == val) break;
      int cnt = val / j;
      int mo = val % j;
      if(mo == 0) {
        cnt--;
        mo += j;
        int add = mo / cnt;
        if(mo % cnt == 0) {
          j += (add - 1);
        } else {
          j += add;
        }
      } else {
        int add = mo / cnt;
        if(mo % cnt == 0) {
          j += (add - 1);
        } else {
          j += add;
        }
      }
    }


    if(i == 0) {
      for(int j = 0; j < cur.size(); j++) {
        int split = val / cur[j];
        if(val % cur[j] != 0) split++;
        lastdp[j] = split - 1;
      }
    } else {
      unordered_map<int, ll> curf;
      int k = 0;
      for(int j = 0; j < cur.size(); j++) {
        int split = val / cur[j];
        if(val % cur[j] != 0) split++;
        int mx = cal(val, split);
        while(k < pre.size()) {
          if(k + 1 < pre.size() && pre[k + 1] <= mx) {
            k++;
          } else {
            break;
          }
        }
        curdp[j] = lastdp[k] + ((split - 1ll) * (i + 1));
        curdp[j] %= mod;
      }
      
      FOR(j, 0, cur.size()) {
        lastdp[j] = curdp[j];
      }
    }
    pre = cur;
  }
  printf("%d\n",res);

}



int main()
{
  int t = 1;
  cin >> t;
  int T = t;
  while (t--)
  {
    int n;
    cin >> n;
    ve<int> a(n);
    FOR(i, 0, n) {
      scanf("%d",&a[i]);
    }
    solve(a, T);
  }
  return 0;
}
