#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;

ll dp[200000 + 10][2];



ll dfs(ve<int>& dis, ve<ve<int>>& graph, int root, int dep, int dest) {
  if(dep != dis[root] && dep != dis[root] + 1) {
    return 0;
  }

  if(root == dest) {
    return 1;
  }

  int bit = 0;
  if(dis[root] + 1 == dep) {
    bit = 1;
  }
  if(dp[root][bit] != -1) {
    return dp[root][bit];
  }



  ll res = 0;
  for(int next : graph[root]) {
    res += dfs(dis, graph, next, dep + 1, dest);
    res %= mod;
  }


  return dp[root][bit] = res;
}





void solve() {
  int n, m, s, t;
  cin >> n >> m >> s >> t;
  s--;
  t--;
  memset(dp, -1, sizeof(dp));

  ve<ve<int>> graph(n);
  ve<ve<int>> rev(n);
  for(int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    u--; v--;
    graph[u].pb(v);
    graph[v].pb(u);
  }

  ve<int> dis(n, INF);
  queue<int>q;
  q.push(s);
  dis[s] = 0;
  while(q.size() > 0) {
    int root = q.front(); q.pop();
    for(int & next : graph[root]) {
      if(1 + dis[root] < dis[next]) {
        dis[next] = 1 + dis[root];
        q.push(next);
      }
    }
  }

  ll res = dfs(dis, graph, s, 0, t);
  cout << res << endl;
  
}

int main()
{
  int t = 1;
  cin >> t;
  while (t--)
  {

    solve();
  }

  return 0;
}
