// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    long dp[];
    long pre[];
    int offer[];
    public void solution() {
        int n = fs.Int();
        int m=fs.Int();
        int k=fs.Int();
        dp=new long[k+2];
        Arrays.fill(dp,-1);
        int A[]=new int[n];
        for(int i=0;i<n;i++){
            A[i]=fs.Int();
        }

        offer=new int[k+1];
        Arrays.fill(offer,-1);
        for(int i=0;i<m;i++){
            int x=fs.Int();
            int y=fs.Int();
            if(x>=offer.length)continue;
            offer[x]=Math.max(offer[x],y);
        }



        Arrays.sort(A);
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<k;i++){
            list.add(A[i]);
        }

        Collections.reverse(list);
        pre=new long[list.size()];
        long sum=0;
        for(int i=0;i<list.size();i++){
            sum+=list.get(i);
            pre[i]=sum;
        }


        long res=dfs(list,0);
        out.println(res);
    }



    public long dfs(List<Integer>list,int i){
        if(i>=list.size()){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        long res=Long.MAX_VALUE;

        res=Math.min(res,dfs(list,i+1)+list.get(i));
        for(int j=0;j<offer.length;j++){
            if(offer[j]==-1)continue;
            int x=j;
            int y=offer[j];
            int take=x-y;
            if(i+x-1<list.size()){
                res=Math.min(res,dfs(list,i+x)+get(pre,i,i+take-1));
            }
        }
        dp[i]=res;
        return res;
    }

    public long get(long pre[],int l,int r){
        if(l>r){
            return 0;
        }
        if(l==0)return pre[r];
        return pre[r]-pre[l-1];
    }


}



