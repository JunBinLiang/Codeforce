// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    int f[];
    int dp[][];
    List<Integer>lists[];
    public void solution() {
        int n =fs.Int();
        int A[]=new int[n];
        f=new int[n];
        lists=new ArrayList[8];
        Arrays.setAll(lists,e->new ArrayList<>());
        for(int i = 0; i < n;i++){
            A[i]=fs.Int()-1;
            f[i]=lists[A[i]].size();
            lists[A[i]].add(i);
        }

        dp=new int[n+1][257];
        int res = 0;
        int l = 1, r = A.length / 8 + 3;
        while(l<=r){
            for(int p[]:dp){
                Arrays.fill(p,-1);
            }

            int mid = l + (r - l) / 2;
            int x = dfs(A,0,255,mid);
            //System.out.println(mid+" "+x);
            if(x>0){
                res=x;
                l = mid + 1;
            }
            else{
                r = mid - 1;
            }
        }

        out.println(res);
    }

    public int dfs(int A[],int i, int state,int cnt){
        if(i>=A.length){
            if(state == 0){
                return 0;
            }
            if(cnt==1){
                return 0;
            }
            return -100000;
        }
        if(dp[i][state]!=-1){
            return dp[i][state];
        }

        int res = -1000000;
        res = Math.max(res,dfs(A,i+1,state,cnt));
        if((state&(1<<A[i]))!=0){
            int newstate = state ^ (1<<A[i]);
            int pos = f[i];
            List<Integer>list=lists[A[i]];
            if(pos+cnt-1<list.size()){
                res = Math.max(res,cnt+dfs(A,list.get(pos+cnt-1)+1,newstate,cnt));
            }

            if(cnt==1){
                res = Math.max(res,dfs(A,i+1,newstate,cnt));
            }
            else{
                if(pos+cnt-2<list.size())res = Math.max(res,cnt - 1 +dfs(A,list.get(pos+cnt-2)+1,newstate,cnt));
            }
        }

        dp[i][state]=res;
        return res;
    }

}
