// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    int dp[][][];
    public void solution(int testcase) {
        int n = fs.Int();
        int A[][]=new int[n][4];
        for(int i = 0; i < n; i++){
            A[i][0]=fs.Int();
            A[i][1]=fs.Int();
            A[i][2]=fs.Int();
            A[i][3]=i + 1;
        }
        Arrays.sort(A,(a,b)->{
           return a[1]-b[1];
        });

        dp=new int[A.length][2001][2];
        for(int i =0;i<dp.length;i++){
            for(int j = 0; j < dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        int res = dfs(A,0,0);
        List<Integer>list=new ArrayList<>();

        int time = 0;
        for(int i =0;i<n;i++){
            if(time>=dp[0].length)break;
            if(dp[i][time][1]==1){
                list.add(A[i][3]);
                time += A[i][0];
            }
        }

        out.println(res);
        out.println(list.size());
        for(int x:list){
            out.print(x+" ");
        }
    }

    public int dfs(int A[][],int i,int t){
        if(i>=A.length){
            return 0;
        }
        if(t > 2000){
            return 0;
        }

        if(dp[i][t][0]!=-1){
            return dp[i][t][0];
        }

        int res = 0;
        res = dfs(A, i + 1, t);//not take
        dp[i][t][1]=0;
        if(t + A[i][0]<A[i][1]){
            int v2 = A[i][2]+dfs(A,i+1,t+A[i][0]);
            //take
            if(v2>res){
                res=v2;
                dp[i][t][1]=1;
            }
        }

        return dp[i][t][0]=res;
    }


}
