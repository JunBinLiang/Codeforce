#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;

int res[200000 + 10][2];
int ori[200000 + 10][2];

bool comp(const vector<int>& a, const vector<int>& b) {
  return a[0] < b[0];
}

int cal(vector<vector<int>>& a) {
  vector<vector<int>> b;
  for(int i = 0; i < a.size(); i++) {
    int x = a[i][0], y = a[i][1], m = a[i][2], index = a[i][3];
    if(x >= m) {
      b.pb({m, 0, index, m});
    } else {
      b.pb({x, m - x, index, m});    
    }
  }

  sort(b.begin(), b.end(), comp);
  unordered_map<int, int> f;
  int cnt = 0;
  int mx = -1;
  for(int i = 0; i < b.size(); i++) {
    int x = b[i][0], y = b[i][1], index = b[i][2], m = b[i][3];
    if(mx == -1) {
      cnt++;
      f[x] = 1;
      mx = x;
    } else {
      int dif = x - mx;
      if(ori[index][1] - y >= dif) {
        b[i][0] = mx;
        b[i][1] = m - mx;
      } else {
        cnt++;
        f[x] = 1;
        mx = x;
      }
    }
    res[index][0] = b[i][0];
    res[index][1] = b[i][1];
  }

  return cnt;
}


void solve() {
  int n;
  cin >> n;
  map<int, vector<vector<int>>> f;
  for(int i = 0; i < n; i++) {
    int x, y, m;
    cin >> x >> y >> m;
    ori[i][0] = x;
    ori[i][1] = y;
    f[x + y - m].pb({x, y, x + y - m, i});
  }

  int cnt = 0;
  for(auto it = f.begin(); it != f.end(); it++) {
    vector<vector<int>> a = it -> second;
    cnt += cal(a);
  }

  
  cout << cnt << endl;
  for(int i = 0; i < n; i++) {
    cout << ori[i][0] - res[i][0] << " " << ori[i][1] - res[i][1] << endl;
  }
}

 
int main()
{
  int t = 1;
  cin >> t;
  while(t--) {
    solve();
  } 

  return 0;
}


