#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)
#define W while
#define um unordered_map
#define us unordered_set
#define str string

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;


bool dp[55][500000 + 100];
void solve(ve<int>& a, int d) {
  int n = a.size();
  sort(a.begin(), a.end());
  memset(dp,false, sizeof(dp));  
  dp[0][0] = true;
  int res = 0;
  ll sum = 0;
  FOR(i, 1, n + 1) {
    int val = a[i - 1];
    sum += val;
    int mx = 0;
    FOR(j, 0, 500000 + 1) {
      dp[i][j] |= dp[i - 1][j];
      if(dp[i - 1][j]) {
        mx = max(mx, j);
      }
      if(j - val < 0)continue;
      int last = j - val;
      if(mx * 2 + d >= j && dp[i - 1][last]) {
        dp[i][j] = true;
        res = max(res, j);
      }
      
    }
  }

  ll ans = 0, step = 0;
  ll j;
	while(true){
		for(j=ans+d;j>ans;j--)
				if(j<=sum&&dp[n][j]) {
          break;
        }
			if(j==ans)break;
			ans = j;step++;
	}
  cout << ans << " " << step << endl;


}

int main()
{
  int t = 1;
  //cin >> t;
  W (t--)
  {
    int n, d;
    cin >> n >> d;
    ve<int> a(n);
    FOR(i, 0, n) {
      cin >> a[i];
    }
    solve(a, d);
  }
  return 0;
}





