// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution(int testcase) {
        int t = fs.Int();
        while(t>0){
            t--;
            int l = fs.Int();
            int r = fs.Int();
            out.println(f(l,r));
        }
    }

    public long f(int l,int r){
        if(l==0){
            return get(r,r);
        }

        return get(r,r) + get(l - 1,l - 1) - get(l-1,r) - get(r,l-1);
    }

    public long get(int l,int r){
        long dp[][][]=new long[33][2][2];
        for(int i =0;i<dp.length;i++){
            for(int j = 0;j<dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        long a = dfs(dp,l,r,30,1,1);
        return a;

    }


    public long dfs(long dp[][][],int x,int y, int i,int s1,int s2){
        if(i<0){
            return 1;
        }
        if(dp[i][s1][s2]!=-1){
            return dp[i][s1][s2];
        }
        long res = 0;
        int b1 = 0;
        int b2 = 0;
        if((x&(1<<i))!=0)b1=1;
        if((y&(1<<i))!=0)b2=1;

        if(s1==1&&s2==1){
            if(b1==0){
                if(b2==0){
                    res += dfs(dp,x,y,i-1,1,1);//[0,0]
                }
                else{
                    res += dfs(dp,x,y,i-1,1,1);//[0,1]
                    res += dfs(dp,x,y,i-1,1,0);//[0,0]
                }
            }
            else{
                if(b2==0){
                    res += dfs(dp,x,y,i-1,1,1);
                    res += dfs(dp,x,y,i-1,0,1);
                }
                else{
                    res += dfs(dp,x,y,i-1,0,1);

                    res += dfs(dp,x,y,i-1,1,0);
                    res += dfs(dp,x,y,i-1,0,0);
                }
            }
        }
        else if(s1==1){
            if(b1==1){
                res += dfs(dp,x,y,i-1,1,0);//[1,1] [1, 0]
                res += dfs(dp,x,y,i-1,0,0) * 2;//[0,1] [0, 0]
            }
            else{
                res += dfs(dp,x,y,i-1,1,0) * 2;//[0,1] [0, 0]
            }
        }
        else if(s2==1){
            if(b2==1){
                res += dfs(dp,x,y,i-1,0,1);//[1,1] [0, 1]
                res += dfs(dp,x,y,i-1,0,0) * 2;//[1,0] [0, 0]
            }
            else{
                res += dfs(dp,x,y,i-1,0,1) * 2;//[1,0] [0, 0]
            }
        }
        else{
            res += dfs(dp,x,y,i-1,0,0) * 3;//[0,1] [1,0] [0,0]
        }

        return dp[i][s1][s2] = res;
    }


}
