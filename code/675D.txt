// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n =Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }
            Solution sol1=new Solution(out);
            sol1.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;

    }


    public void solution(int A[]) {
        int res[]=new int[A.length];
        TreeMap<Integer,int[]>tree=new TreeMap<>();
        tree.put(A[0],new int[]{-1,-1});
        for(int i=1;i<A.length;i++){

            Integer lo = tree.lowerKey(A[i]);
            Integer hi=tree.higherKey(A[i]);

            if(lo!=null&&hi!=null){
                int pair1[]=tree.get(lo);
                int pair2[]=tree.get(hi);
                if(pair1[1]==-1){
                    pair1[1]=0;
                    res[i]=lo;
                }
                else{
                    pair2[0]=0;
                    res[i]=hi;
                }
            }
            else if(lo==null){
                int pair[]=tree.get(hi);
                pair[0]=0;
                res[i]=hi;
            }
            else{//hi == null
                int pair[]=tree.get(lo);
                pair[1]=0;
                res[i]=lo;
            }
            tree.put(A[i],new int[]{-1,-1});
        }

        for(int i=1;i<res.length;i++){
            out.print(res[i]+" ");
        }
    }



}

