// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int k=Int();

            Solution sol1=new Solution(out);
            sol1.solution(n,k);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;

    }


    long dp[];
    int n;
    public void solution(int n,int k) {
        if(k==0){
            out.println(1);
            return;
        }

        long res=0;
        long p = pow(2,n-1);
        if(n%2==1){
            res=pow(pow(2,n-1)+1,k);
        }
        else{
            long cur = 1;
            for(int i=k-1;i>=0;i--){
                //all 1
                long a = pow(pow(2,n),i);
                res += (a*cur);
                res%=mod;
                cur = cur * (p - 1);
                cur%=mod;
            }
            res +=cur;
            res%=mod;
        }
        out.println(res);
    }




    public long pow(long a,long b){
        if(b<0)return 1;
        long res=1;
        long pow=a;
        for(int i=0;i<64;i++){
            if((b&(1l<<i))!=0){
                res*=pow;
                res%=mod;
            }
            pow*=pow;
            pow%=mod;
        }
        return res;
    }
}




