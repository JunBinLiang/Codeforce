// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    int mod = 1000000009;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    int f[]=new int[300000 + 10];
    int A[];
    public void solution() {
        f[0]=f[1]=1;
        for(int i=2;i<f.length;i++){
            f[i]=f[i-1]+f[i-2];
            f[i]%=mod;
        }


        int n =fs.Int();int m =fs.Int();
        A=new int[n];
        for(int i = 0; i < n;i++){
            A[i]=fs.Int();
        }


        Seg seg = new Seg(0,n - 1);
        for(int i = 0;i<m;i++){
            int opt = fs.Int();
            int l =fs.Int()-1;
            int r = fs.Int()-1;
            if(opt==1){
                seg.update(l,r,l);
                //dfs(seg);
                //System.out.println();
            }
            else{
                int res = seg.query(l,r);
                out.println(res);
            }
        }

    }

    public void dfs(Seg root){
        if(root==null)return;
        dfs(root.left);
        dfs(root.right);
        System.out.println(root.l+" "+root.r+"     "+root.sum+"  "+root.a+"  "+root.b);
    }

    public int kth(int a,int b,int k){
        if(k==1)return a;
        if(k==2)return b;
        return (int)(((a+0l)*f[k-2-1]%mod)+((b+0l)*f[k-1-1])%mod)%mod;
    }

    public int ksum(int a,int b,int k){
        if(k==1)return a;
        if(k==2)return a+b;
        return (kth(a,b,k+2) - b + mod) % mod;
    }

    /*public long ksum(int i,int k){
        return (f[i+k-1+2] - f[i+1] + mod)%mod;
    }*/


   class Seg{
        int l,r;
        int sum=0;
        int size=0;
        int a = 0; int b = 0;
        Seg left=null,right=null;

        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            this.size=r-l+1;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.sum=left.sum+ right.sum;
                this.sum%=mod;
            }else{
                this.sum=A[l];
            }
        }

        public int query(int s,int e){
            if(e<0||s<0)return 0;
            int mid=l+(r-l)/2; //left :  to mid-1,

            if(l==s&&r==e){
                return this.sum();
            }

            if(this.a!=0||this.b!=0){
                int lsize = mid - l + 1;
                int rsize = size - lsize;
                this.left.pushdown(a,b);
                this.right.pushdown(kth(a,b,lsize+1),kth(a,b,lsize+2));
                this.sum=this.left.sum()+ this.right.sum();
                this.sum%=mod;
                this.a=0;
                this.b=0;
            }


            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return (left.query(s,mid)+right.query(mid+1,e))%mod;
            }
        }

        public void update(int s,int e,int start){
            int mid=l+(r-l)/2;

            if(e==r&&s==l){
                a+=f[s-start];
                b+=f[s-start+1];
                a%=mod;
                b%=mod;
                return;
            }

            if(this.a!=0||this.b!=0){
                int lsize = mid - l + 1;
                int rsize = size - lsize;
                this.left.pushdown(a,b);
                this.right.pushdown(kth(a,b,lsize+1),kth(a,b,lsize+2));
                this.a=0;
                this.b=0;
            }

            if(e<=mid){
                left.update(s,e,start);
            }
            else if(s>=mid+1){
                right.update(s,e,start);
            }else{
                left.update(s,mid,start);
                right.update(mid+1,e,start);
            }
            this.sum=this.left.sum()+ this.right.sum();
            this.sum%=mod;
        }


        public void pushdown(int x,int y){
            this.a+=x;
            this.b+=y;
            a%=mod;
            b%=mod;
        }

        public int sum(){
            if(this.size==1){
                return (this.sum+a)%mod;
            }
            if(this.size==2){
                return (this.sum+((a+b)%mod))%mod;
            }
            return (this.sum+ksum(a,b,size))%mod;
        }

    }



}

/*
4 3
1 2 3 4
1 1 4
1 2 4
2 1 3
* */

/*
50 6
161 254 648 762 509 898 67 189 622 567 604 32 652 964 427 466 580 817 599 752 598 476 908 7 783 167 1000 117 737 559 534 33 670 855 988 366 241 980 500 308 277 110 86 719 779 69 708 550 24 714
2 3 39
1 10 30
1 6 42
2 13 13
2 38 41
2 6 30
* */
