



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {




        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}


class People{
    String name;
    int age;
    public People(String name, int age) { //create instant : call
        this.name = name;
        this.age = age;
    }

    public int getAge(){
        return age;
    }
    public String getName(){
        return name;
    }
}




class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }

    Map<String,Long> f = new HashMap<>();
    public void solution(int all, int testcase) {
        int n = fs.Int();

        int A[] = new int[n];
        int B[] = new int[n];
        for(int i = 0; i < n; i++){
            A[i] = fs.Int();
        }
        for(int i = 0; i < n; i++){
            B[i] = fs.Int();
        }

        int g = A[0];
        for(int i = 1; i < n; i++){
            g = gcd(g, A[i]);
        }
        if(g!=1){
            out.println(-1);
            return;
        }

        long res = Long.MAX_VALUE;
        for(int i = 0; i < n; i++){
            res = Math.min(res, B[i] + dfs(A,B,0,A[i]));
        }
        out.println(res);
    }

    public long dfs(int A[],int B[], int i, int g) {
        if(i >= A.length) {
            if(g==1)return 0;
            return 1000000000l;
        }
        String state = i +","+g;
        if(f.containsKey(state)){
            return f.get(state);
        }
        long res = 1000000000l;
        //take
        int newg = gcd(g,A[i]);
        res = Math.min(res, dfs(A, B,i+1,g));
        res = Math.min(res, B[i] + dfs(A, B,i+1,newg));
        //System.out.println(state +"  "+res);
        f.put(state,res);
        return res;
    }



    public int gcd(int num1, int num2) {
        if (num2 != 0){
            return gcd(num2, num1 % num2);
        } else{
            return num1;
        }
    }




}

//15min

