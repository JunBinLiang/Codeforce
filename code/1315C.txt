#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}

int mod = 1000000007;
int INF = INT_MAX;



void solve(vector<int>& A) {
 int n = A.size();
 vector<int>B;
 vector<bool> seen(2 * n + 1);
 for(int i = 0; i < n; i++) {
   int a = A[i];
   seen[a] = true;
 }

 

 for(int i = 0; i < n; i++) {
   int a = A[i];
   B.push_back(a);
   bool find = false;
   for(int j = a + 1; j < seen.size(); j++) {
     if(!seen[j]) {
       seen[j] = true;
       B.push_back(j);
       find = true;
       break;
     }
   }
   if(!find) {
     cout << -1 << endl;
     return;
   }
 }


//print answer
 for(int i : B) {
   cout << i << " ";
 }
 cout << endl;
}

int main()
{
  int t;
  cin >> t;
  while(t--) {
    int n; cin >> n;
    vector<int>a;
    for(int i = 0;i < n; i++) {
      int x; cin >> x;
      a.push_back(x);
    }
    solve(a);
  } 

  return 0;
}

