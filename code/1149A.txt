#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 998244353;
int INF = INT_MAX;



void solve() {
  int n;
  cin >> n;
  int a = 0, b = 0;
  FOR(i, 0, n) {
    int x; 
    cin >> x;
    if(x == 1) a++;
    else b++;
  }

  ve<bool> seen(400000 + 50);
  ve<int> pri;
  FOR(i, 2, 400000) {
    if(seen[i]) continue;
    pri.pb(i);
    for(int j = i; j < 400000; j += i) {
      seen[j] = true;
    }
  }

  int sum = 0;
  ve<int> res;
  int j = 0;
  while(res.size() != n) {
    int p = pri[j++];
    int need = p - sum;
    if(need > a + b * 2) {
      FOR(i, 0, a) res.pb(1);
      FOR(i, 0, b) res.pb(2);
      break;
    } else {
      while(need > 1 && b > 0) {
        b--; need -= 2;
        res.pb(2);
      }
      while(need > 0 && a > 0) {
        a--; need--;
        res.pb(1);
      }
      sum = p;
    }
  }

  for(int i : res) {
    cout << i << " ";
  }

}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    solve();
  }
  return 0;
}
