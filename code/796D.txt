



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {




        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}


class People{
    String name;
    int age;
    public People(String name, int age) { //create instant : call
        this.name = name;
        this.age = age;
    }

    public int getAge(){
        return age;
    }
    public String getName(){
        return name;
    }
}




class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 1000000007;
    int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }

    List<int[]>graph[];
    int edges[][];
    public void solution(int all, int testcase) {
        int n  = fs.Int();
        int k = fs.Int();
        int d = fs.Int();
        int A[] = new int[k];
        graph = new ArrayList[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        edges=new int[n-1][2];
        for(int i = 0; i < k; i++){
            A[i]=  fs.Int() - 1;
        }

        Set<Integer> set= new HashSet<>();
        for(int i = 0; i < n - 1; i++){
            int u = fs.Int()-1,v = fs.Int()-1;
            graph[u].add(new int[]{v,i});graph[v].add(new int[]{u,i});
        }


        int dis[] = new int[n];
        Arrays.fill(dis,INF);
        Queue<int[]>q=new LinkedList<>();
        for(int i:A){
            q.add(new int[]{-1, i});
            dis[i] = 0;
        }

        boolean need[] = new boolean[n];
        int sum = n - 1;

        while(q.size()>0){
            int pair[] = q.poll();
            int last = pair[0], u = pair[1];
            for(int p[] : graph[u]){
                int v = p[0], index = p[1];
                if(dis[u] + 1 < dis[v]){
                    dis[v] = 1 + dis[u];
                    q.add(new int[]{u,v});
                    need[index] = true;
                    sum--;
                }
            }
        }


        out.println(sum);
        for(int i = 0; i < n - 1; i++) {
            if(!need[i]){
                out.print((i + 1)+" ");
            }
        }

    }




}




