



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }



    public void solution(int all, int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        List<Integer>lists[] = new ArrayList[4];
        Arrays.setAll(lists,e->new ArrayList<>());

        for(int i = 0; i < n; i++) {
            int w = fs.Int();
            int c = fs.Int();
            lists[w].add(c);
        }

        for(int i = 1; i <= 3; i++) {
            Collections.sort(lists[i]);
            Collections.reverse(lists[i]);
        }

        lists[2].add(0);

        long pre[][] = new long[4][n + 1];
        for(int i = 1; i < lists.length; i++) {
            List<Integer>list = lists[i];
            long sum = 0;
            for(int j = 0; j < list.size(); j++) {
                sum += list.get(j);
                pre[i][j] = sum;
            }
        }
        

        long res = 0;
        for(int i = 0; i <= lists[3].size();i++){
            if(i + 1 > m)break;
            long c = get(pre[3],0,i - 1);
            int w = m - (i * 3);
            if(w < 0)break;

            res = Math.max(res, c + get(pre[1],0, Math.min(w - 1, lists[1].size() - 1)));

            int l = 0, r = Math.min(w / 2, lists[2].size() - 1);
            while(l <= r) {
                int mid = l + (r - l) / 2;
                long a = get(pre[2], 0, mid - 1);
                long b = get(pre[1], 0, Math.min((w - mid * 2) - 1, lists[1].size() - 1));
                res = Math.max(res, a + b + c);



                if((mid + 1) * 2 > w)break;
                long aa = get(pre[2], 0, mid);
                long bb = get(pre[1], 0, Math.min((w - (mid + 1) * 2) - 1, lists[1].size() - 1));

                if(aa + bb >= a + b) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        }
        out.println(res);
    }

    public long get(long A[], int l, int r) {
        if(l > r)return 0;
        if(l == 0)return A[r];
        return A[r] - A[l - 1];
    }

}



