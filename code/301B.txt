


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }


    public void solution(int all, int testcase) {
        int n = fs.Int();
        int d = fs.Int();
        int A[] = new int[n];
        int B[][] = new int[n][2];
        for(int i = 1; i < n - 1; i++){
            A[i] = fs.Int();
        }

        //d >= A[i]
        for(int i = 0; i < n; i++) {
            B[i][0] = fs.Int();
            B[i][1] = fs.Int();
        }

        int dis[] = new int[n];
        int pre[] = new int[n];
        Arrays.fill(pre, -1);
        Arrays.fill(dis, INF);
        dis[0] = 0;
        Queue<Integer>q=new LinkedList<>();
        q.add(0);
        while(q.size() > 0){
            int index = q.poll();
            int x = B[index][0], y = B[index][1];
            for(int next = 0; next < n; next++){
                if(index == next)continue;
                int dd = (d) * (Math.abs(x - B[next][0]) + Math.abs(y - B[next][1])) - A[index];
                if(dis[index] + dd < dis[next]){
                    dis[next] = dis[index] + dd;
                    pre[next] = index;
                    q.add(next);
                }
            }
        }

        int cur = n - 1;
        List<Integer>path = new ArrayList<>();
        while(cur != -1){
            path.add(cur);
            cur = pre[cur];
        }

        Collections.reverse(path);

        int res = -1;
        int l = 0, r = 1000000000;
        while(l <= r) {
            int mid = l + (r - l) / 2;
            int oil = mid;
            boolean ok = true;
            for(int i = 1; i < path.size(); i++) {
                int j1 = path.get(i - 1);
                int j2 = path.get(i);
                int dd = (Math.abs(B[j1][0]-B[j2][0]) + Math.abs(B[j1][1]-B[j2][1])) * d;
                if(oil < dd) {
                    ok = false;
                    break;
                }
                oil -= dd;
                oil += A[j2];
            }
            if(ok){
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        out.println(res);
    }



}


