



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=Int();
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 1000000007;
    int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }




    public void solution(int all, int testcase) {
        int n = fs.Int();int m = fs.Int();
        long res = 0;
        int A[] = new int[n];
        for(int i = 0; i < n; i++) {
            A[i] = fs.Int();
        }

        Set<String>set=new HashSet<>();
        for(int i = 0; i < m; i++) {
            int x = fs.Int();
            int y = fs.Int();
            int mn = Math.min(x,y);
            int mx = Math.max(x,y);
            String s = mn + ","+mx;
            set.add(s);
        }

        Arrays.sort(A);
        List<int[]>list=new ArrayList<>();
        for(int i = 0; i < n;i++){
            int j = i;int cnt = 0;
            while(j<n&&A[i]==A[j]){
                j++;
                cnt++;
            }
            list.add(new int[]{A[i], cnt});
            i = j - 1;
        }

        Collections.sort(list,(a, b)->{
            return a[1] - b[1];
        });


        List<Integer>cnts=new ArrayList<>();
        Map<Integer,List<Integer>>f=new HashMap<>();
        for(int i=0;i<list.size();i++){
            int j = i;
            cnts.add(list.get(i)[1]);
            f.put(list.get(i)[1],new ArrayList<>());
            while(j < list.size() && list.get(j)[1] == list.get(i)[1]){
                int x = list.get(j)[0];
                int cnt = list.get(j)[1];
                f.get(cnt).add(x);
                j++;
            }
            i = j - 1;
        }

        for(Integer key:f.keySet()){
            List<Integer>l=f.get(key);
            Collections.sort(l);
            Collections.reverse(l);
        }


        for(int i = 0; i < cnts.size();i++){
            int cntx = cnts.get(i);
            List<Integer>xlist = f.get(cntx);
            for(int j = i; j >= 0; j--) {
                int cnty = cnts.get(j);
                List<Integer>ylist=f.get(cnty);
                for(int x  :xlist){
                    for(int y:ylist){
                        int mn = Math.min(x,y);
                        int mx = Math.max(x,y);
                        String s = mn + ","+mx;
                        if(x!=y&&!set.contains(s)){
                            res = Math.max(res, (cntx + cnty+0l) * (x + y));
                            break;
                        }
                    }
                }
            }
        }

        out.println(res);
    }




}


