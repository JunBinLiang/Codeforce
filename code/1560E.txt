// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=Int();
        for(int t=0;t<T;t++){
            String s=Str();

            Solution sol1=new Solution(out);
            sol1.solution(s);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }

    Set<Character>set=new HashSet<>();
    int left[];
    public void solution(String s) {
        char A[]=s.toCharArray();
        left=new int[A.length];
        int in[][]=new int[26][2];
        for(int i=0;i<in.length;i++){
            in[i][0]=Integer.MAX_VALUE;
            in[i][1]=Integer.MIN_VALUE;
        }

        for(int i=0;i<A.length;i++){
            int d=A[i]-'a';
            in[d][0]=Math.min(in[d][0],i);
            in[d][1]=i;
            set.add(A[i]);
            left[i]=set.size();
        }

        List<int[]>list=new ArrayList<>();
        for(int i=0;i<26;i++){
            if(in[i][0]==Integer.MAX_VALUE)continue;
            list.add(new int[]{i,in[i][0],in[i][1]});
        }

        Collections.sort(list,(a,b)->{
            return a[2]-b[2];
        });

        String res = "";
        String o = "";
        StringBuilder str2=new StringBuilder();


        for(int i=0;i<list.size();i++){
            int pair[]=list.get(i);
            char c=(char)(pair[0]+'a');
            str2.append(c);
        }

        //System.out.println(str2.toString());

        int l = 0,r=A.length-1;
        boolean found = true;
        while(l<=r){
            int mid = l+(r-l)/2;
            String t = check(s,mid,str2.toString());
            int len=t.length();
            if(len==s.length()){
                o=t;
                res = (s.substring(0,mid+1));
                found=true;
                break;
            }
            else if(len<s.length()){
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }


        if(!found){
            out.println(-1);
            return;
        }
        if(!o.equals(s)){
            out.println(-1);
            return;
        }
        out.println(res+" "+str2.toString());

    }

    public String check(String s,int mid,String order){
        if(left[mid]!=set.size()){
            return "";
        }
        StringBuilder str=new StringBuilder();
        String temp=s.substring(0,mid+1);
        str.append(temp);
        for(int i=0;i<order.length();i++){
            char c=order.charAt(i);
            StringBuilder ntemp=new StringBuilder();
            for(int j=0;j<temp.length();j++){
                if(temp.charAt(j)!=c){
                    ntemp.append(temp.charAt(j));
                }
            }
            temp=ntemp.toString();
            str.append(temp);
        }

       // System.out.println(mid+"  "+str.toString());

        return str.toString();
    }





}


