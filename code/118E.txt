// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int edges[][]=new int[m][2];
            for(int i=0;i<edges.length;i++){
                edges[i][0]=Int()-1;
                edges[i][1]=Int()-1;
            }

            Solution sol1=new Solution(out);
            sol1.solution(n,edges);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }

    List<Integer>graph[];
    boolean bridge=false;
    int time=1;
    int dis[];int low[];
    boolean visit[];
    List<int[]>res=new ArrayList<>();
    Set<String>set=new HashSet<>();
    public void solution(int n,int edges[][]) {
        graph=new ArrayList[n];
        visit=new boolean[n];
        dis=new int[n];
        low=new int[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int edge[]:edges){
            int u=edge[0],v=edge[1];
            graph[u].add(v);graph[v].add(u);
        }

        dfs(-1,0);
        if(bridge){
            out.println(0);
        }
        else{
            for(int pair[]:res){
                int mn=Math.min(pair[0],pair[1]);
                int mx=Math.max(pair[0],pair[1]);
                String s=mn+","+mx;
                if(!set.contains(s)){
                    set.add(s);
                    out.println(pair[0]+" "+pair[1]);
                }
            }
        }
    }



    public void dfs(int parent,int root){
        List<Integer>childs=graph[root];
        dis[root]=low[root]=time++;
        visit[root]=true;
        for(int c:childs){
            if(!visit[c]){
                res.add(new int[]{root+1,c+1});
                dfs(root,c);
                low[root]=Math.min(low[root],low[c]);
                if(low[c]>dis[root]){
                    bridge=true;
                }
            }else{
                if(c!=parent){
                    res.add(new int[]{root+1,c+1});
                    low[root]=Math.min(low[root],low[c]);
                }
            }
        }
    }

}


