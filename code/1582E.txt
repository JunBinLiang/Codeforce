// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=Int();
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution() {
        int n = fs.Int();
        int A[]=new int[n];
        long pre[]=new long[n];
        int res = 1;
        for(int i = 0;i<n;i++){
            A[i]=fs.Int();
        }

        int l = 0, r = A.length-1;
        while(l<r){
            int t = A[l];
            A[l]= A[r];
            A[r]=t;
            l++;r--;
        }

        for(int i=0;i<A.length;i++){
            pre[i]+=A[i];
            if(i-1>=0)pre[i]+=pre[i-1];
        }

        long dp[][] = new long[450][n];
        for(long p[]:dp){
            Arrays.fill(p,Long.MIN_VALUE);
        }

        for(int i = 0; i < n; i++) {
            dp[1][i] = A[i];
            if(i - 1 >= 0){
                dp[1][i]=Math.max(dp[1][i],dp[1][i-1]);
            }
            for(int j = 2;j < dp.length;j++){
                if(j > i + 1)break;
                if(i-1>=0)dp[j][i] = Math.max(dp[j][i],dp[j][i-1]);

                long sum = get(pre,i - j + 1,i);
                if(i-1>=0&&i - j >=0&&sum<dp[j-1][i - j]){
                    dp[j][i]=Math.max(dp[j][i],sum);
                }

            }
        }


        for(int i = 1; i < dp.length;i++){
            for(int j = 0; j < dp[0].length;j++){
                if(dp[i][j]!=Long.MIN_VALUE){
                    res=Math.max(res,i);
                }
            }
        }

        out.println(res);
    }

    public long get(long A[],int l,int r){
        if(l==0)return A[r];
        return A[r]-A[l-1];
    }

}


//3 2 1

