#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;



//use : 45 min

void solve() {
  int n, m;
  cin >> n >> m;  

  bool f[22000010];
  memset(f, false, sizeof(f));
  int dp[30];
  int cnt = 0;
  for(int i = 1; i <= 22; i++) {
    for(int j = 1; j <= m; j++) {
      if(!f[i * j]) {
        cnt++;
        f[i * j] = true;
      }
    }
    dp[i] = cnt;
  }

  
  ll res = 1;
  vector<bool> seen(n + 1);
  for(int i = 2; i <= n; i++) {
    if(seen[i]) continue;
    int add = 0;
    for(ll j = i; j <= n; j *= i) {
      seen[(int)(j)] = true;
      add++;
    }
    res += dp[add];
  }

  cout << res << endl;
}

 
int main()
{
  int t = 1;
  while(t--) {
    solve();
  } 

  return 0;
}


