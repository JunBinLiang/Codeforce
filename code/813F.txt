// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    boolean res[];
    int nums[];
    int rank[];
    int dis[];
    boolean isb[];
    public void solution() {
        int n=fs.Int();
        int m=fs.Int();
        res=new boolean[m];

        isb=new boolean[n+1];
        nums=new int[n+1];
        dis=new int[n+1];
        rank=new int[n+1];

        for(int i=0;i<nums.length;i++){
            nums[i]=i;
            rank[i]=i;
            isb[i]=true;
        }

        Map<String,List<Integer>>f=new HashMap<>();
        for(int i=0;i<m;i++){
            int u = fs.Int()-1;
            int v=fs.Int()-1;
            int mn=Math.min(u,v);
            int mx = Math.max(u,v);
            String state = mn+","+mx;
            if(!f.containsKey(state))f.put(state,new ArrayList<>());
            f.get(state).add(i);
        }


        Seg seg = new Seg(0, m - 1);
        for(String key:f.keySet()){
            String p[]=key.split(",");
            int x=Integer.parseInt(p[0]),y=Integer.parseInt(p[1]);
            List<Integer>list=f.get(key);

            for(int i=0;i<list.size();i+=2){//taking effect from [l,r-1]
                int l=list.get(i);
                int r=m-1;
                if(i+1<list.size()){
                    r=list.get(i+1)-1;
                }

                seg.add(l,r,new int[]{x,y});
            }
        }

        dfs(seg);

        for(boolean a : res){
            if(a){
                out.println("YES");
            }
            else{
                out.println("NO");
            }
        }

    }

    public void dfs(Seg seg){
        boolean ans = true;
        Stack<int[]>sta=new Stack<>();
        List<int[]>q=seg.query;




        for(int pair[]:q){
            int u=pair[0],v=pair[1];
            int r1=find(nums,u);
            int r2=find(nums,v);
            int d1=dd(nums,u);
            int d2=dd(nums,v);

            if(r1!=r2){
                if(rank[r1]>rank[r2]){
                    rank[r1]+=rank[r2];
                    nums[r2]=r1;
                    sta.push(new int[]{r1,r2,0,dis[r2]});
                    dis[r2]=d1^d2^1;

                }
                else{
                    rank[r2]+=rank[r1];
                    nums[r1]=r2;
                    sta.push(new int[]{r1,r2,1,dis[r1]});
                    dis[r1]=d1^d2^1;
                }



            }
            else{
                if(d1==d2){
                    ans=false;
                    break;
                }
            }
        }

        /*System.out.println(seg.l+" "+seg.r);
        for(int r=0;r<nums.length;r++){
            int vv[]=find(nums,r);
            System.out.println(r+"  "+Arrays.toString(vv));
        }System.out.println();*/


        if(ans&&seg.left==null&&seg.right==null){
            res[seg.l]=true;
        }

        if(ans&&seg.left!=null){
            dfs(seg.left);
            dfs(seg.right);
        }

        while(sta.size()>0){
            int p[]=sta.pop();
            int r1=p[0],r2=p[1],state=p[2];
            if(state==0){
                rank[r1]-=rank[r2];
                nums[r2]=r2;
                dis[r2]=p[3];

            }
            else{
                rank[r2]-=rank[r1];
                nums[r1]=r1;
                dis[r1]=p[3];
            }
        }

    }

    public int find(int fa[],int x){
        while(fa[x]!=x){
            x=fa[x];
        }
        return x;
    }

    public int dd(int fa[],int x){
        int d = 0;
        while(fa[x]!=x){
            d^=dis[x];
            x=fa[x];
        }
        return d;
    }

    class Seg{//segment tree
        int l,r;
        Seg left=null,right=null;
        List<int[]>query=new ArrayList<>();
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }

        public void add(int s,int e,int p[]){
            if(l==s&&r==e){//add the query to cur
                this.query.add(p);
                //System.out.println(s+" "+e+"  "+Arrays.toString(p));
                return ;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                left.add(s,e,p);
            }
            else if(s>=mid+1){
                right.add(s,e,p);
            }
            else{
                left.add(s,mid,p);
                right.add(mid+1,e,p);
            }
        }
    }

}








