// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n =fs.Int();
        int m = fs.Int();
        int t=fs.Int();
        int A[][]=new int[n][m];
        for(int i = 0; i < n ;i++){
            String s = fs.Str();
            for(int j = 0; j < m; j++){
                A[i][j]=s.charAt(j)-'0';
            }
        }


        int d[][]=new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        boolean seen[][]=new boolean[n][m];
        Queue<int[]>Q=new LinkedList<>();
        int dis[][]=new int[n][m];
        for(int p[]:dis){
            Arrays.fill(p,INF);
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m;j++){
                if(seen[i][j])continue;
                Queue<int[]>q=new LinkedList<>();
                q.add(new int[]{i,j});
                seen[i][j]=true;
                List<int[]>list=new ArrayList<>();
                list.add(new int[]{i,j});
                while(q.size()>0){
                    int top[]=q.poll();
                    int r = top[0],c=top[1];
                    for(int p[]:d){
                        int x = r+p[0],y = c+p[1];
                        if(x<0||x>=n||y<0||y>=m||seen[x][y]||A[x][y]!=A[i][j])continue;
                        seen[x][y]=true;
                        q.add(new int[]{x,y});
                        list.add(new int[]{x,y});
                    }
                }

                if(list.size()>1){
                    for(int p[]:list){
                        Q.add(p);
                        dis[p[0]][p[1]] = 0;
                        //System.out.println(Arrays.toString(p));
                    }
                }
            }
        }


        while(Q.size()>0){
            int top[]=Q.poll();
            int r = top[0],c=top[1];
            for(int p[]:d){
                int x = r+p[0],y = c+p[1];
                if(x<0||x>=n||y<0||y>=m||A[x][y]==A[r][c])continue;
                if(dis[x][y]>dis[r][c]+1){
                    dis[x][y]=dis[r][c]+1;
                    Q.add(new int[]{x,y});
                }
            }
        }


        for(int i = 0;i<t;i++){
            int r = fs.Int()-1;
            int c = fs.Int()-1;
            long q = fs.Long();
            int D = dis[r][c];
            if(D==INF || q <= D){//no change
                out.println(A[r][c]);
            }
            else{
                long add = q - D;
                long res = (A[r][c] + add) % 2;
                out.println(res);
            }
        }

    }



}





