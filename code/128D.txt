// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution() {

        int n =fs.Int();
        int A[]=new int[n];
        for(int i=0;i<n;i++){
            A[i]=fs.Int();
        }

        Map<Integer,Integer>f=new HashMap<>();
        Arrays.sort(A);
        LinkedList<Integer>list=new LinkedList<>();
        list.add(A[0]);

        for(int i:A){
            if(!f.containsKey(i))f.put(i,0);
            f.put(i,f.get(i)+1);
        }
        del(f,A[0]);

        while(true){
            int head = list.getFirst();
            int tail = list.getLast();
            boolean update = false;
            if(f.containsKey(head - 1)){
                update = true;
                del(f,head-1);
                list.addFirst(head-1);
            }
            else if(f.containsKey(head+1)){
                update = true;
                del(f,head+1);
                list.addFirst(head+1);
            }

            if(f.containsKey(tail-1)){
                update = true;
                del(f,tail-1);
                list.addLast(tail-1);
            }
            else if(f.containsKey(tail+1)){
                update = true;
                del(f,tail+1);
                list.addLast(tail+1);
            }

            if(!update){
                break;
            }
        }

        if(list.size()!=A.length){
            out.println("NO");
            return;
        }

        int head = list.getFirst();
        int tail = list.getLast();
        if(Math.abs(head-tail)!=1){
            out.println("NO");
            return;
        }


        out.println("YES");

    }


    public void del(Map<Integer,Integer>f,int k) {
        f.put(k,f.get(k)-1);
        if(f.get(k)==0)f.remove(k);
    }

}

