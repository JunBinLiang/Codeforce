#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;




unordered_map<int, char> f = {{0, 'A'}, {1, 'N'}, {2, 'O'}, {3, 'T'}};

ll cal(vector<int>& a, vector<int>& b) {
  ll res = 0;
  vector<int> cnt(4);
  vector<int> indexs(4, -1);
  for(int i : b) {
    cnt[i]++;
  }

  for(int i = 0; i < b.size(); i++) {
    if(indexs[b[i]] == -1) {
      indexs[b[i]] = i;
    }
  }


  for(int i = 0; i < a.size(); i++) {
    for(int j = 0; j < indexs.size(); j++) {
      if(indexs[j] < indexs[a[i]]) {
        res += cnt[j];
      }
    }
    cnt[a[i]]--;
  }
  return res;
}

void solve(string& s) {
  vector<int> a;
  vector<int> cnt(4);
  for(char & c : s) {
    if(c == 'A') {
      a.pb(0);
    } else if(c == 'N') {
      a.pb(1);
    } else if(c == 'O') {
      a.pb(2);
    } else {
      a.pb(3);
    }
    cnt[a[a.size() - 1]]++;
  }

  vector<int>b;
  for(int i = 0; i < 4; i++) {
    if(cnt[i] > 0) {
      b.pb(i);
    }
  }

  ll mx = -1;
  string res = "";

  for(int i = 0; i <= 24; i++) {
    vector<int>c;
    for(int j = 0; j < b.size(); j++) {
      int t = cnt[b[j]];
      while(t--) {
        c.pb(b[j]);
      }
    }

    ll change = cal(a, c);
    if(change > mx) {
      mx = change;
      res.clear();
      for(int x : c) {
        res += f[x];
      }
    }
    next_permutation(b.begin(), b.end()); 
  }

  cout << res << endl;

  
}

int main()
{
  int t = 1;
  cin >> t;
  while (t--)
  {
    string s;
    cin >> s;
    solve(s);
  }

  return 0;
}
