// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=Int();
        for(int t=0;t<T;t++){
            long k=Long();
            Solution sol1=new Solution(out,fs);
            sol1.solution(k);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution(long k) {
        long res = find(k);
        out.println(res);
        //get(1000000000);
        //System.out.println(find1())
        //System.out.println(get(99));
       // System.out.println(get(100));
        //System.out.println(get(101));
    }

    public long find(long k){
        long l =1,r=1000000000;
        long num = -1;
        while(l<=r){
            long mid = l + (r-l)/2;
            long cnt = get(mid);
            if(cnt>=k){
                num=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }

        long cnt = get(num-1);
        long dif = (k-cnt);


        if(dif==0){
            String s = (num-1)+"";
            return (s.charAt(s.length()-1)) - '0';
        }
        return find1(dif);
    }

    public long find1(long kth){
        //1 2 3 4 5 ...
        //kth
        if(kth<10){
            return kth;
        }

        long res = -1;
        long total = 9;
        long add=2;
        long x = 90;
        long sum = 9;

        //925
        while(true){
            if(total+add*x<kth){
                total+=add*x;
            }
            else{
                long ith = (kth-total)/add;

                sum+=ith;
                int mod = (int)((kth-total-add*ith));

                if(mod==0){
                    res = sum%10;
                }
                else{
                    sum++;
                    String s = sum+"";
                    res = ((s.charAt(mod-1)) - '0');
                }
                break;
            }
            sum=sum*10+9;
            add++;
            x*=10;
        }
        return res;
    }

    public long get(long mid){
        if(mid<10){
            return (1+mid)*mid/2;
        }
        long res = 45;
        long pre = 9;

        long add = 2;
        long x = 90;
        long sum = 9;


        while(true){
            long end = pre + x * add;
            if(sum * 10 + 9>=mid){
                x = mid - sum;
                end = pre + (x) * add;
                long total = cal(pre+add,end,x);
                res+=total;
                break;
            }
            else{
                long total = cal(pre+add,end,x);
                res+=total;
            }



            sum=sum*10+9;
            add++;
            x*=10;
            pre=end;
        }
        return res;
    }

    public long cal(long l,long r,long size){
        return (l+r)*size/2;
    }


}



