// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        int A[]=new int[n];
        for(int i = 0; i < n;i++){
            A[i]=fs.Int();
        }

        int q[][]=new int[m][2];
        for(int i = 0; i < q.length;i++){
            q[i][0]=fs.Int();
            q[i][1]=fs.Int();
        }
        Arrays.sort(q,(a,b)->{
            return a[0]-b[0];
        });

        int l = 1, r = 400000;
        int res = -1;
        while(l<=r){
            int mid = l + (r - l) / 2;
            if(check(A,q,mid)){
                res =mid;
                r= mid - 1;
            }else{
                l = mid + 1;
            }
        }
        out.println(res);
    }

    //greedy strategy
    public boolean check(int A[],int q[][],int mid){
        int B[]=new int[A.length];
        for(int i = 0;i<B.length;i++)B[i]=A[i];
        int cur = 0;
        List<int[]>list=new ArrayList<>();
        Map<Integer,Integer>f=new HashMap<>();
        for(int p[]:q){
            if(p[0]<=mid){
                f.put(p[1],p[0]);
            }
        }

        int mx = 0;
        int j = 0;
        for(int i = 1; i <= mid; i++){
            cur++;
            while(j<q.length&&q[j][0]==i){
                int pair[]=q[j];
                if(f.get(pair[1])==pair[0]){
                    int index = pair[1] - 1;
                    if(B[index]>cur){
                        B[index]-=cur;
                        cur = 0;
                    }else{
                        cur-=B[index];
                        B[index]=0;
                    }
                }
                j++;
            }
        }

        int sum = 0;
        for(int i:B)sum+=i * 2;
        return sum<=cur;
    }

}
