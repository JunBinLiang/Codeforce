// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=Int();
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution() {

        String s = fs.Str();
        int n = s.length();
        int m = fs.Int();
        char A[]=s.toCharArray();

        for(int i = 0; i < A.length;i++){
            if(A[i]=='('||A[i]==')'){
                A[i]='(';
            }
            else{
                A[i]='[';
            }
        }


        int pre[]=new int[n];
        Stack<Integer>sta = new Stack<>();
        int cnt = 0;

        for(int i = 0; i < A.length;i++){
            if(A[i]=='('){
                if(sta.size()==0){
                    sta.push(i);
                    cnt++;
                }
                else{
                    if(A[sta.peek()]==A[i]){
                        sta.pop();
                        if(cnt>0)cnt--;
                        else cnt++;
                    }
                    else{
                        sta.push(i);
                        if(cnt>0)cnt++;
                        else cnt--;
                    }
                }

            }
            else{
                if(sta.size()==0){
                    sta.push(i);
                    cnt--;
                }
                else{
                    if(A[sta.peek()]==A[i]){
                        sta.pop();
                        if(cnt>0)cnt--;
                        else cnt++;
                    }
                    else{
                        sta.push(i);
                        if(cnt>0)cnt++;
                        else cnt--;
                    }
                }
            }
            pre[i]=cnt;
        }


        //System.out.println(Arrays.toString(pre));
        for(int i = 0;i<m;i++){
            int l = fs.Int()-1;
            int r = fs.Int()-1;
            out.println(Math.abs(get(pre,l,r))/2);
        }

    }

    public int get(int A[],int l,int r){
        if(l==0)return A[r];
        return A[r] - (A[l - 1]);
    }


}
//([))[)()][]]

//XYX  XYXXXY      YYY  => 4 / 2
//123  21010-1     0-10
//


