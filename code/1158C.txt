#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;


int id;
void dfs(vector<vector<int>>& graph, vector<int>& ans, int root) {
  if(root < ans.size()) {
    ans[root] = id--;
  }
  for(int next : graph[root]) {
    dfs(graph, ans, next);
  }
}

void solve(vector<int>& a) {
  int n = a.size();
  vector<int> in(n);
  vector<vector<int>> graph(n + 1);
  id = n;

  for(int i = 0; i < n; i++) {
    if(a[i] == -1)continue;
    int next = a[i] - 1;
    if(next == n) {

    } else {
      if(i == next) {
        cout << -1 << endl;
        return;
      }
    }
  }

  set<int> se;
  se.insert(n);
  for(int i = 0; i < n; i++) {
    if(a[i] == -1)a[i] = i + 2;
    int next = a[i] - 1;
    if(se.find(i) != se.end())se.erase(i);
    
    int first = *(se.begin());
    if(next > first) {
      cout << -1 << endl;
      return;
    }
    se.insert(next);
    graph[next].pb(i);
  }

  vector<int> ans(n);
  dfs(graph, ans, n);
  for(int i : ans) {
    cout << i << " ";
  } cout << endl;

}

int main()
{
  int t = 1;
  cin >> t;
  while(t--) {
    int n;
    cin >> n;
    vector<int> a (n);
    for(int i = 0; i < n; i++) {
      cin >> a[i];
    }
    solve(a);
  } 

  return 0;
}

