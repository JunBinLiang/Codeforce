// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    List<int[]>graph[];
    int dis[];
    boolean seen[];
    int B[] = new int[31];
    public void solution(int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        dis=new int[n];seen=new boolean[n];
        graph=new ArrayList[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i = 0; i < m;i++){
            int u = fs.Int()-1;
            int v = fs.Int()-1;
            int w = fs.Int();
            graph[u].add(new int[]{v,w});
            graph[v].add(new int[]{u,w});
        }

        dfs(0,0);
        int res = dis[n - 1];


        for(int i = B.length-1;i>=0;i--){
            if((res^B[i])<res){
                res = res^B[i];
            }
        }

        out.println(res);
    }


    public void dfs(int root,int weight){
        seen[root]=true;
        dis[root]=weight;
        for(int pair[]:graph[root]){
            int next = pair[0];
            int w = pair[1];
            if(seen[next]){
                ins(B,dis[root]^dis[next]^w);
            }
            else{
                dfs(next,weight^w);
            }
        }
    }

    public void ins(int A[],int x){
        for(int i = 30;i>=0;i--){
            if((x&(1<<i))!=0){
                if(A[i]==0){
                    A[i]=x;
                    return;
                }
                x = x ^ A[i];
            }
        }
    }

}
