// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            int A[][]=new int[m][3];
            for(int i=0;i<m;i++){
                A[i][0]=Int()-1;
                A[i][1]=Int()-1;
                A[i][2]=Int();
            }
            Solution sol=new Solution(out);
            sol.solution(n,A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000009;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int n,int A[][]) {
        Arrays.sort(A,(a,b)->{
            return a[2]-b[2];
        });

        int l = 0,r=A.length-1;
        int pos = -1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(isb(A,mid,n)){
                pos=mid-1;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(pos==-1)out.println(0);
        else out.println(A[pos][2]);
    }

    public boolean isb(int A[][],int mid,int n){
        List<Integer>graph[]=new ArrayList[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i=mid;i<A.length;i++){
            int u=A[i][0],v=A[i][1];
            graph[u].add(v);
            graph[v].add(u);
        }
        int colors[]=new int[n];
        for(int i=0;i<colors.length;i++){
            if(colors[i]==0){
                boolean isp = dfs(graph,i,colors,1);
                if(!isp)return false;
            }
        }
        return true;
    }
    public boolean dfs(List<Integer>graph[],int root,int colors[],int color){

        colors[root]=color;
        int newc=1;
        if(color==1)newc=2;
        boolean res = true;
        for(int next:graph[root]){
            if(colors[next]==0){
                res=res&dfs(graph,next,colors,newc);
            }
            else{
                if(colors[next]==color){
                    res=false;
                    break;
                }
            }
        }
        return res;
    }
}
















