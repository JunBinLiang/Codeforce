//Persistent Seg
// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    int A[];
    public void solution(int testcase) {
        int n = fs.Int();
        A=new int[n];
        int pre[]=new int[n+5];
        for(int i= 0;i<n;i++){
            A[i]=fs.Int();
        }

        PersistentSeg segs[]=new PersistentSeg[2 * n + 10];
        int j = 1;
        segs[0]=new PersistentSeg(0, n + 1,true);
        int map[]=new int[A.length+1];

        for(int i = 0; i < A.length;i++){
            if(pre[A[i]]!=0){
                if(segs[j]==null)segs[j] = new PersistentSeg(0, n + 1);
                int preI = pre[A[i]];
                segs[j].update(segs[j-1],segs[j],preI,n + 10000);
                j++;
            }

            if(segs[j]==null)segs[j] = new PersistentSeg(0, n + 1);
            segs[j].update(segs[j-1],segs[j],i + 1,pre[A[i]]);
            pre[A[i]] = i + 1;//record previous position
            map[i + 1] = j;
            j++;
        }


        int m = fs.Int();
        for(int i = 0; i < m; i++){
            int x =fs.Int();
            int y =fs.Int();
            int pair[]=segs[map[y]].query(x,y);
            if(pair[0]<x){
                out.println(A[pair[1] - 1]);
            }
            else{
                out.println(0);
            }
        }

    }

    public void dfs(PersistentSeg seg){
        if(seg==null)return;
        dfs(seg.left);
        dfs(seg.right);
        System.out.println(seg.l+" "+seg.r+"   "+seg.min+" "+seg.val);
    }


    class PersistentSeg{
        int l,r;
        int min=Integer.MAX_VALUE;
        int val = -1;
        PersistentSeg left=null,right=null;
        public PersistentSeg(int l,int r,boolean init){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new PersistentSeg(l,mid,true);
                if(r>=mid+1)right=new PersistentSeg(mid+1,r,true);
            }else{

            }
        }
        public PersistentSeg(int l,int r){
            this.l=l;
            this.r=r;
        }



        public int[] query(int s,int e){
            if(l==s&&r==e){
                return new int[]{this.min,this.val};
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }
            else{
                int l[]=left.query(s,mid);
                int r[]=right.query(mid+1,e);
                if(l[0]<r[0]){
                    return l;
                }
                else{
                    return r;
                }
            }
        }


        public void update(PersistentSeg pre, PersistentSeg cur, int index,int mn) {
            if (cur.l == cur.r) {
                cur.min=mn;
                cur.val = index;
                return;
            }

            int mid = cur.l + (cur.r - cur.l) / 2;
            if (index <= mid) {//update left
                cur.right = pre.right;
                cur.left = new PersistentSeg(pre.left.l, pre.left.r);
                update(pre.left, cur.left, index,mn);
            } else {//update right
                cur.left = pre.left;
                cur.right = new PersistentSeg(pre.right.l, pre.right.r);
                update(pre.right, cur.right, index,mn);
            }

            if(cur.right.min > cur.left.min){
                cur.min=cur.left.min;
                cur.val=cur.left.val;
            }
            else {
                cur.min=cur.right.min;
                cur.val=cur.right.val;
            }
        }

    }
}



















