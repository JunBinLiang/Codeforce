



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }
}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;
    }




    public void solution(int all, int testcase) {
        int n = fs.Int();
        int A[][] = new int[n][2];
        for(int i = 0; i < n; i++) {
            A[i][0] = fs.Int();
            A[i][1] = i;
        }
        Arrays.sort(A, (a, b) -> {
            return a[0] - b[0];
        });

        FenWick fen1 = new FenWick(n);
        FenWick fen2 = new FenWick(n);


        long res = 0;
        for(int i = 0; i < A.length; i++) {
            int val = A[i][0], index = A[i][1];
            long x = (index + 1l) * (n - index);
            x %= mod;
            x *= val;
            x %= mod;
            res += (x);
            res %= mod;
            long a = fen1.sumRange(0, index);
            a %= mod;
            long b = fen2.sumRange(index, n - 1);
            b %= mod;
            b *= val;
            b %= mod;
            res += ( (b) * (index + 1));
            res %= mod;
            a *= val;
            a %= mod;
            res += ( (a) * (n - index));
            res %= mod;
            fen1.update(index, index + 1);
            fen2.update(index, n - index);
        }
        out.println(res);
    }


}
class FenWick {
    long tree[];//1-index based
    public FenWick(int n) {
        tree=new long[n+1];
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            tree[i] %= 1000000007;
            i+=(i&-i);
        }
    }

    public long sumRange(int i, int j) {
        return (pre(j+1)-pre(i) + 1000000007) % 1000000007;
    }

    public long pre(int i){
        long sum=0;
        while(i>0){
            sum+=tree[i];
            sum %= 1000000007;
            i-=(i&-i);
        }
        return sum;
    }
}



