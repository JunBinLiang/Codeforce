#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}

int mod = 1000000007;
int INF = INT_MAX;

bool same(vector<int>&a, vector<int>& b) {
  for(int i = 0; i < a.size(); i++) {
    if(a[i] != b[i]) {
      return false;
    }
  }
  return true;
}

void solve(vector<int>& a, int k) {
  vector<int>b(a.begin(), a.end());
  sort(b.begin(), b.end());
  int need = 0;
  map<int, int>f;
  for(int i = 0; i < b.size(); i++) {
    f[b[i]] = i;
  }


  for(int i = 0; i < a.size(); i++) {
    int j = i + 1;
    while(j < a.size() && f[a[j]] == f[a[j - 1]] + 1) {
      j++;
    }
    need++;
    i = j - 1;
  }

  if(need <= k) {
    cout << "YES" << endl;
  } else {
    cout << "NO" << endl;    
  }

  
}

int main()
{
  int t;
  cin >> t;
  while(t--) {
    int n, k; cin >> n >> k;
    vector<int>a(n);
    for(int i = 0; i < n; i++) {
      cin >> a[i];
    }
    solve(a, k);
  } 

  return 0;
}

