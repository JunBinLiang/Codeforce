// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution() {

        String s = fs.Str();
        long k = fs.Int();
        char A[]=s.toCharArray();
        long n = A.length;


        if(k>(1l+n)*n/2){
            out.println("No such line.");
            return;
        }

        long suffix[]=new long[26];
        for(int i =0;i<n;i++){
            suffix[A[i]-'a']+=(n - i);
        }

        StringBuilder str = new StringBuilder();
        Queue<int[]>q=new LinkedList<>();


        int index=-1;
        int l = -1;
        int sum = 0;
        for(int i = 0;i<26;i++){
            if(suffix[i]>=k){
                for(int j=0;j<n;j++){
                    if(A[j]-'a'==i){
                        q.add(new int[]{j,1});
                    }
                }
                break;
            }
            k-=suffix[i];
        }

        //System.out.println(k);

        while(k>0){
            long cnt[]=new long[26];
            int size = q.size();
            int level = q.peek()[1];
            
            if(size>=k){
                index=q.peek()[0];
                l = level;
                break;
            }

            k-=size;
            List<Integer>pos[]=new ArrayList[26];
            Arrays.setAll(pos,e->new ArrayList<>());

            sum =0;
            for(int i=0;i<size;i++){
                int peek[]=q.poll();

                if(peek[0]+1<n){
                    int next = peek[0]+1;
                    cnt[A[next]-'a']+=(n-next);
                    pos[A[next]-'a'].add(next);
                }
            }

            for(int i = 0;i<26;i++){
                if(cnt[i]>=k){
                    List<Integer>list=pos[i];
                    for(int j:list){
                        q.add(new int[]{j,level+1});
                    }
                    break;
                }
                k-=cnt[i];
            }

            //System.out.println(Arrays.toString(cnt)+"  "+k);
            //System.out.println();

        }



        while(l>0){
            str.append(A[index]);
            l--;
            index--;
        }
        out.println(str.reverse().toString());

    }



}

//prefix + a
//prefix + b
//prefix + c

