// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    int A[];
    int pos[];
    Map<String,Integer>f=new HashMap<>();
    public void solution(int testcase) {
        int n = fs.Int();
        A=new int[n];
        pos=new int[A.length + 1];
        int p = -1;
        for(int i = 0; i < n; i++){
            A[i] = fs.Int();
            if(A[i] == 1){
                p= i;
            }
        }
        rotate(A,p+1);
        int shift = p + 1;



        //Caetesian Tree
        Stack<Integer> sta = new Stack<>();
        sta.push(n - 1);
        int heights[]=new int[n];
        Arrays.fill(heights,1);
        int dp[]=new int[n];
        int mx = 0;
        for(int i = 0; i < A.length - 1; i++){
            pos[A[i]] = i;
            int top = -1;
            while(sta.size() > 0 && A[sta.peek()] > A[i]) {
                top = sta.pop();
                int peek = sta.peek();
                heights[peek] = Math.max(heights[peek],1+heights[top]);
            }


            if(top != -1){
                heights[i]=Math.max(heights[i],heights[top] + 1);
            }


            mx = Math.max(mx,heights[i] + sta.size() - 1);
            sta.push(i);
            dp[i] = mx;
        }


        Seg seg = new Seg(0,n - 1);
        int mn = build(seg,0,n-2);
        int res = 0;
        
        int l = 0, r = A.length-2;
        while(l<=r){
            int mid = l + (r - l)/2;
            //shift [0 : mid]
            int rightH = dp[mid];
            int leftH = build(seg,mid+1,A.length - 2);
            if(leftH>=rightH){
                if(leftH < mn){
                    mn = leftH;
                    res = mid;
                }
                l = mid + 1;
            }
            else{
                r = mid - 1;
            }
        }

        l = 0; r = n - 2;
        while(l<=r){
            int mid = l + (r - l)/2;
            //shift [0 : mid]
            int rightH = dp[mid];
            int leftH = build(seg,mid+1,A.length - 2);
            if(leftH<=rightH){
                if(rightH < mn){
                    mn = leftH;
                    res = mid;
                }
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }

        out.println((mn + 1)+" "+((shift + res + 1) % n ));
    }


    public int build(Seg seg,int l,int r){
        if(l>r){
            return 0;
        }
        if(l==r){
            return 1;
        }


        String key = l +"," + r;
        if(f.containsKey(key))return f.get(key);
        int mn = seg.query(l,r);

        //System.out.println(l+" "+r+" "+  mn);

        int index = pos[mn];
        int lh = build(seg,l,index -1);
        int rh = build(seg,index+1,r);
        int res = Math.max(lh,rh) + 1;
        f.put(key,res);
        return res;
    }

    public void rotate(int A[],int index){
        List<Integer>list=new ArrayList<>();
        for(int i =index;i<A.length;i++){
            list.add(A[i]);
        }

        for(int i = 0; i < index;i++){
            list.add(A[i]);
        }
        for(int i = 0; i < A.length;i++){
            A[i] = list.get(i);
        }
    }

    class Seg{
        int l,r;
        int min=Integer.MAX_VALUE;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.min=Math.min(left.min,right.min);
            }else{
                this.min = A[l];
            }
        }
        public int query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                min=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.min=Math.min(left.min,right.min);
        }
    }


}
