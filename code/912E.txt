#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;





ll LIM = 1000000000000000000ll;
ve<ve<ll>> all(2);
void dfs(vector<int>& a, ll cur, int j, int index) {
  all[index].pb(cur);
  for(int i = j; i < a.size(); i++) {
    int p = a[i];
    if(LIM / cur >= p) {
      dfs(a, cur * p, i, index);
    } else {
      break;
    }
    
  }
}

void solve(ve<int>& a, int k) {
  vector<int> b, c;
  for(int i = 0; i < a.size(); i++) {
    if(i & 1) {
      b.pb(a[i]);
    } else {
      c.pb(a[i]);
    }
  }
  sort(b.begin(), b.end());
  sort(c.begin(), c.end());

  dfs(b,1, 0, 0);
  dfs(c, 1, 0, 1);
  FOR(i, 0, 2) {
    sort(all[i].begin(), all[i].end());
  } 
  
  auto check = [&](ll mid) -> bool {
      ll cnt = 0;
      int j = all[1].size() - 1;
      for(int i = 0; i < all[0].size(); i++) {
        while(j >= 0 && all[0][i] > mid / all[1][j]) {
          j--;
        }
        cnt += (j + 1);
      }
      return cnt >= k;
  };

  ll l = 1, r = 1000000000000000000ll;
  ll res = 0;
  while(l <= r) {
    ll mid = l + (r - l) / 2;
    if(check(mid)) {
      res = mid;
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }
  cout << res << endl;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    int n;
    cin >> n;
    ve<int> a(n);
    FOR(i, 0, n) {
      cin >> a[i];
    }
    int k;
    cin >> k;
    solve(a, k);
  }

  return 0;
}
