// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            String A[]=new String[n];
            for(int i=0;i<n;i++){
                A[i]=Str();
            }
            Solution sol1=new Solution(out);
            sol1.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;

    }

    Node root = new Node();
    public void solution(String A[]) {
        for(String s:A){
            add(root,s);
        }

        PriorityQueue<Integer>pq=dfs(root,0);
        int res=0;
        while(pq.size()>0)res+=pq.poll();
        out.println(res);
    }


    public PriorityQueue<Integer> dfs(Node root,int level){

        PriorityQueue<Integer>pq=new PriorityQueue<>((a,b)->{
            return b-a;
        });
        for(Node next:root.childs){
            if(next!=null){
                PriorityQueue<Integer>q=dfs(next,level+1);
                if(pq.size()<q.size()){
                    pq.addAll(q);
                }
                else{
                    q.addAll(pq);
                    pq=q;
                }
            }
        }

        if(root.isleaf){
            pq.add(level);
        }
        else if(level>0){
            pq.add(level);
            pq.poll();
        }
        return pq;
    }

    public void add(Node root,String s){
        for(int i=0;i<s.length();i++){
            int c=s.charAt(i)-'a';
            if(root.childs[c]==null){
                root.childs[c]=new Node();
            }
            root=root.childs[c];
        }
        root.isleaf=true;
    }

    class Node{
        boolean isleaf=false;
        Node childs[]=new Node[26];
    }


}



