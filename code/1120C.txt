// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n =fs.Int();
        int a = fs.Int();
        int b = fs.Int();

        String s = fs.Str();
        char A[]=s.toCharArray();
        int f[][]=new int[n+1][n+1];//longest common substring
        for(int i = 1; i <= n;i++){
            for(int j = 1; j<=n;j++){
                if(A[i - 1] == A[j - 1]){
                     f[i][j] = f[i - 1][j - 1] + 1;
                }
            }
        }

        for(int i = 1; i <= n;i++){
            for(int j = 1; j<=n;j++){
                f[i][j] = Math.max(f[i][j],f[i][j - 1]);
            }
        }


        /*for(int p[]:f){
            System.out.println(Arrays.toString(p));
        }*/

        int dp[]=new int[s.length()];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0] = a;
        for(int i = 1; i < s.length();i++){
            dp[i] = Math.min(dp[i],dp[i - 1] + a);
            int mx = 0;
            for(int j = 1; j <= i + 1; j++){
                if(i - j < 0)break;
                if(f[i + 1][i + 1 - j] >= j){
                    mx = j;
                }
            }
            for(int j = mx; j >= 1; j--){
                dp[i] = Math.min(dp[i], b + dp[i - j]);
            }
        }


        out.println(dp[n - 1]);
    }

}
