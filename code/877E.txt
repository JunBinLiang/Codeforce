// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    List<Integer>graph[];
    int B[];int A[];
    int ids1[],ids2[];
    int cnt[];
    int id=0;
    public void solution() {
        int n=fs.Int();
        A=new int[n];
        A[0]=-1;
        for(int i=1;i<A.length;i++){
            A[i]=fs.Int()-1;
        }
        B=new int[n];
        for(int i=0;i<B.length;i++){
            B[i]=fs.Int();
        }


        graph=new ArrayList[n];
        ids1=new int[n];
        ids2=new int[n];
        cnt=new int[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i=0;i<A.length;i++){
            if(A[i]==-1)continue;
            graph[A[i]].add(i);
        }





        count(0);
        Seg seg = new Seg(0,n-1);

        //System.out.println(Arrays.toString(ids1));

        int m=fs.Int();
        for(int i=0;i<m;i++){//query
            String s = fs.Str();
            int v=fs.Int()-1;
            int r = ids1[v];
            int l = r-cnt[v]+1;
            //flip range : [l : r]
            //System.out.println(l+"  "+r);
            if(s.equals("pow")){
                seg.update(l,r,1);
            }
            else{
                int res = seg.query(l,r);
                out.println(res);
            }
        }
    }




    public int count(int root){
        cnt[root]=1;
        for(int next:graph[root]){
            cnt[root]+=count(next);
        }
        ids1[root]=id;
        ids2[id]=root;
        id++;
        return cnt[root];
    }



    class Seg{
        int l,r;
        int sum=0;
        int setTo=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.sum=left.sum+right.sum;
            }else{
                this.sum=B[ids2[l]];
            }
        }

        public int query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                //System.out.println(s+" "+e+"  "+this.sum()+"  "+this.setTo);
                return this.sum();
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(setTo!=0){//push down
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.sum=left.sum()+right.sum();
                this.setTo=0;
            }

            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return left.query(s,mid)+right.query(mid+1,e);
            }
        }

        public void update(int s,int e,int add){
            if(add==0){
                return;
            }

            if(l==s&&r==e){
                this.setTo+=add;
                this.setTo%=2;
                return;
            }
            int mid=l+(r-l)/2;

            //System.out.println(s+" "+e);

            if(setTo!=0){//push down
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.sum=left.sum()+right.sum();
                this.setTo=0;
            }


            if(e<=mid){
                left.update(s,e,add);
            }
            else if(s>=mid+1){
                right.update(s,e,add);
            }else{
                left.update(s,mid,add);
                right.update(mid+1,e,add);
            }

            this.sum=left.sum()+right.sum();
        }

        public int sum(){
            int size =this.r-this.l+1;
            if(this.setTo!=0){
                return size-this.sum;
            }
            else{
                return this.sum;
            }
        }
    }


}



/*
10
1 2 3 3 5 5 7 7 8
0 0 0 0 1 1 1 1 0 0
5
pow 3
pow 9
pow 8
pow 4
get 10
* */

/*
10
1 2 3 3 5 5 7 7 8
0 0 0 0 1 1 1 1 0 0
4
pow 3
pow 9
pow 8
get 10
* */




