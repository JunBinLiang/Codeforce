// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=Int();
        for(int t=0;t<T;t++){
            int kth=Int();
            Solution sol=new Solution(out);
            sol.solution(kth);
        }
        out.close();

    }




    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }




    public void solution(int kth) {
        long res=0;
        long l = 666, r=10000000000000l;
        long dp[][][][]=new long[15][2][4][4];

        while(l<=r){
            long mid = l+(r-l)/2;

            for(int i = 0;i<dp.length;i++){
                for(int j =0;j<dp[0].length;j++){
                    for(int x=0;x<dp[0][0].length;x++){
                        Arrays.fill(dp[i][j][x],-1);
                    }
                }
            }

            String num = mid+"";
            long cnt = dfs(dp,num,0,1,0,0);
            if(cnt>=kth){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }

        }

        out.println(res);
    }

    public long dfs(long dp[][][][],String num,int i,int same,int six,int check){//pred is 6 or not
        if(i>=num.length()){
            if(check>=3){
                return 1;
            }
            else{
                return 0;
            }
        }
        if(dp[i][same][six][check]!=-1)return dp[i][same][six][check];

        long res = 0;
        int d = num.charAt(i)-'0';

        if(same==1){
            if(d<6){
                res+=dfs(dp,num,i+1,1,0,check);
                res+=(d+0l)*dfs(dp,num,i+1,0,0,check);
            }
            else{
                res+=(6l)*dfs(dp,num,i+1,0,0,check);

                if(d==6){
                    int con = Math.min(3,1+six);
                    res+=dfs(dp,num,i+1,1,con,Math.max(check,con));
                }
                else{
                    int con = Math.min(3,1+six);
                    res+=dfs(dp,num,i+1,0,con,Math.max(check,con));

                    res+=(d+1-6-1l-1)*dfs(dp,num,i+1,0,0,check);
                    res+=dfs(dp,num,i+1,1,0,check);
                }

            }

        }
        else{//not same
            int con = Math.min(3,1+six);
            res+=dfs(dp,num,i+1,0,con,Math.max(check,con));
            res+=dfs(dp,num,i+1,0,0,check)*9;
        }

        dp[i][same][six][check]=res;
        return res;
    }


}


