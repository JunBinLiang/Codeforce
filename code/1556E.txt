// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    long pre[];
    public void solution(int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        int A[]=new int[n];
        int B[]=new int[n];
        for(int i = 0; i < n; i++){
            A[i]=fs.Int();
        }

        pre=new long[n];
        for(int i = 0; i < n; i++){
            A[i]=fs.Int() - A[i];
            pre[i] += A[i];
            if(i-1>=0)pre[i]+=pre[i-1];
        }

        //System.out.println(Arrays.toString(pre));

        Seg seg = new Seg(0,pre.length-1);

        while(m>0){
            m--;
            int l = fs.Int()-1;
            int r = fs.Int()-1;
            long s = get(pre,l,r);
            if(s!=0){
                out.println(-1);
                continue;
            }
            long min = seg.query1(l,r);
            long p = 0;
            if(l!=0)p=pre[l-1];
            if(min-p < 0){
                out.println(-1);
                continue;
            }
            long mx = seg.query(l,r);
            out.println(mx - p);
        }


    }

    public long get(long A[],int l,int r){
        if(l==0)return A[r];
        return A[r]-A[l-1];
    }

    class Seg{
        int l,r;
        long max= Long.MIN_VALUE;
        long min = Long.MAX_VALUE;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);

                this.max=Math.max(max,right.max);
                this.max=Math.max(max,left.max);

                this.min=Math.min(min,right.min);
                this.min=Math.min(min,left.min);
            }else{
                this.max = pre[l];
                this.min=pre[l];
            }
        }
        public long query(int s,int e){
            if(l==s&&r==e){
                return max;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.max(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public long query1(int s,int e){
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query1(s,e);
            }
            else if(s>=mid+1){
                return right.query1(s,e);
            }else{
                return Math.min(left.query1(s,mid),right.query1(mid+1,e));
            }
        }

    }

}
