// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution(int testcase) {
        int n = fs.Int();
        int m =fs.Int();
        char A[][]=new char[n][m];
        for(int i = 0;i<n;i++){
            A[i]=fs.Str().toCharArray();
        }

        if(A[n-1][m-1]=='R'){
            out.println(0);
            return;
        }

        if(n==1&&m==1){
            out.println(1);
            return;
        }

        int dp[][][]=new int[n][m][2];
        int sum1[][]=new int[n][m];
        int sum2[][]=new int[m][n];

        for(int i = 0; i < n; i++){
            int sum = 0;
            for(int j = 0; j < m; j++){
                if(A[i][j]=='R'){
                    sum++;
                }
                sum1[i][j]=sum;
            }
        }

        for(int j = 0; j < m; j++){
            int sum = 0;
            for(int i = 0; i < n; i++){
                if(A[i][j]=='R'){
                    sum++;
                }
                sum2[j][i]=sum;
            }
        }


        int sum3[][]=new int[n][m];
        int sum4[][]=new int[m][n];

        int cnt1 = sum1[0][m - 1];
        for(int i = 0; i < m - cnt1; i++){
            dp[0][i][0]=1;
            sum4[i][0] = 1;
        }

        int cnt2 = sum2[0][n-1];
        for(int i = 0; i < n - cnt2;i++){
            dp[i][0][1] = 1;
            sum3[i][0]= 1;
        }


        for(int i = 1;i<n;i++){
            for(int j = 1; j < m; j++){
                //direction to right
                int l = 0, r = j - 1;
                int remain1 = (m - j - 1) - (get(sum1[i],j + 1, m - 1));
                int pos = -1;
                while(l<=r){
                    int mid = l + (r - l) / 2;
                    int cnt = get(sum1[i],mid + 1, j);

                    if(cnt<=remain1){
                        pos = mid;
                        r = mid - 1;
                    } else{
                        l = mid + 1;
                    }
                }
                if(pos!=-1){
                    dp[i][j][0] += get(sum3[i],pos,j - 1);
                    dp[i][j][0]%=mod;
                }

                //direction to down
                int remain2 = (n - i - 1) - (get(sum2[j],i + 1, n - 1));
                l = 0; r = i - 1;pos = -1;
                while(l<=r){
                    int mid = l + (r - l) / 2;
                    int cnt = get(sum2[j],mid + 1, i);
                    if(cnt<=remain2){
                        pos = mid;
                        r = mid - 1;
                    } else{
                        l = mid + 1;
                    }
                }
                if(pos!=-1){
                    dp[i][j][1]+=get(sum4[j],pos,i - 1);
                    dp[i][j][1]%=mod;
                }

                sum3[i][j] += sum3[i][j - 1]+dp[i][j][1];
                sum4[j][i] += sum4[j][i - 1]+dp[i][j][0];
                sum3[i][j] %= mod;
                sum4[j][i] %=mod;
            }
        }

        int res = dp[n - 1][m - 1][0] + dp[n - 1][m - 1][1];
        out.println(res%mod);
    }

    public int get(int A[],int l,int r){
        if(l>r)return 0;
        if(l == 0)return A[r];
        return (A[r] - A[l - 1] + mod) % mod;
    }


}




