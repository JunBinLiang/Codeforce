// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n =Int();
            int A[]=new int[n-1];
            for(int i=0;i<A.length;i++){
                A[i]=Int()-1;
            }

            Solution sol1=new Solution(out);
            sol1.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;

    }

    int A[];
    public void solution(int A[]) {
        this.A=A;
        int N=A.length;
        long res=0;
        Seg seg=new Seg(0,A.length-1);
        long dp[]=new long[A.length];
        dp[A.length-1]=1;

        for(int i=A.length-2;i>=0;i--){
            int p[]=seg.query(i+1,Math.min(A[i],A.length-1));
            int index=p[0];
            dp[i]=dp[index]+(N-i)-(A[i]-index);

        }



        for(long i:dp){
            res+=i;
        }
        out.println(res);

    }

    class Seg{
        int l,r;
        int max = -1;
        int index=-1;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);

                if(left.max>max){
                    max=left.max;
                    index=left.index;
                }
                if(right.max>max){
                    max=right.max;
                    index=right.index;
                }
            }else{
                this.index=l;
                this.max=A[l];
            }
        }
        public int[] query(int s,int e){
            //if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return new int[]{index,max};
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                int l[]=left.query(s,mid);
                int r[]=right.query(mid+1,e);
                if(l[1]>r[1]){
                    return l;
                }
                else{
                    return r;
                }
            }
        }

    }

}



