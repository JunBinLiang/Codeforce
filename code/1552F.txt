#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
//        999999699
int mod = 1000000007;
int INF = INT_MAX;



int a[200000 + 5][3];
ll dp[200000 + 5];
ll pre[200000 + 5];

ll get(int l, int r) {
  if(l > r) return 0;
  if(l == 0) return pre[r];
  return (pre[r] - pre[l - 1] + MOD) % MOD;
}

int find(int y, int r) {
  int l = 0;
  int res = -1;
  while(l <= r) {
    int mid = l + (r - l) / 2;
    if(y <= a[mid][0]) {
      res = mid;
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }
  return res;
}

void solve() {

  int n;
  cin >> n;
  for(int i = 0; i < n; i++) {
    cin >> a[i][0] >> a[i][1] >> a[i][2];
  }

  memset(dp, 0, sizeof(dp));
  memset(pre, 0, sizeof(pre));
  ll res = a[n - 1][0] + 1;
  res %= MOD;

  //cout << res << endl;

  for(int i = 0; i < n; i++) {
    int x = a[i][0], y = a[i][1], s = a[i][2];
    int index = find(y, i);
    ll d = a[i][0] - y;
    
    dp[i] += d;
    dp[i] %= MOD;
    dp[i] += get(index, i - 1);
    dp[i] %= MOD;


    //cout << "line " << i << "  " << index << "  " << d << "  " << dp[i] << endl;

    if(s == 1) {
      res += dp[i];
      res %= MOD;
    }

    if(i > 0) pre[i] = pre[i - 1];
    pre[i] += dp[i];
    pre[i] %= MOD;

    //cout << pre[i] << endl;
  }


  cout << res << endl;
}

 
int main()
{
  int t = 1;
  //cin >> t;
  while(t--) {
    solve();
  } 

  return 0;
}


