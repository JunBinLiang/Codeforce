#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;

ll fact[200000 + 50];
ll inv[200000 + 50];

ll C(int n, int r) {
    return ((fact[n] * inv[r] % mod) * inv[n - r]) % mod;
}

ll modInverse(ll a, ll m){
      ll m0 = m;
      ll y = 0, x = 1;

      if (m == 1)
          return 0;

      while (a > 1) {
          ll q = a / m;
          ll t = m;
          m = a % m;
          a = t;
          t = y;
          y = x - q * y;
          x = t;
      }
      if (x < 0)
          x += m0;
      return x;
  }

void init() {
  memset(fact, 0, sizeof(fact));
  memset(inv, 0, sizeof(inv));

  fact[0] = fact[1] = 1;
  for(int i = 2; i < 200000 + 10; i++) {
    fact[i] = fact[i - 1] * i;
    fact[i] %= mod;
  }

  inv[0]=inv[1]=1;
  for (int i = 2;i < 200000 + 10;i++){
      inv[i]= modInverse(i,mod) * inv[i-1];
      inv[i]%=mod;
  }
}

bool com(pair<int, int>& a, pair<int, int>& b) {
  if(a.f == b.f) {
    return a.se < b.se;
  }
  return a.f < b.f;
}

int h, w;
void solve(vector<pair<int, int>>& a) {
  init();
  ll total = C(h + w - 2, h - 1);
  ll res = 0;

  /*for(int i = 0; i < a.size(); i++) {
    int r = a[i].f, c = a[i].se;
    cout <<"pair : " <<  r << " " << c << endl;
  }*/

  sort(a.begin(), a.end(), com);
  vector<ll> dp(a.size());
  for(int i = 0; i < a.size(); i++) {
    int r1 = a[i].f, c1 = a[i].se;
    ll ways = C(r1 + c1 - 2, r1 - 1);//(1, 1) => (r1, c1)
    for(int j =  i - 1; j >= 0; j--) {
      int r2 = a[j].f, c2 = a[j].se;
      if(r2 <= r1 && c2 <= c1) {//j -> i
        ll x = C(r1 + c1 - r2 - c2, r1 - r2);
        ll y = dp[j];
        x *= y;
        x %= mod;
        ways -= x;
        ways += mod;
        ways %= mod;
      }
    }
    dp[i] = ways;
    ll x = C(h - r1 + w - c1, h - r1);
    ll y = ways;
    ll add = x * y;
    add %= mod;
    res += add;
    res %= mod;
  }
  cout << (total - res + mod) % mod << endl;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    cin >> h >> w;
    int n; cin >> n;
    vector<pair<int, int>> a;
    for(int i = 0; i < n; i++) {
      int r, c;
      cin >> r >> c;
      a.pb({r, c});
    }

    solve(a);
  }

  return 0;
}
