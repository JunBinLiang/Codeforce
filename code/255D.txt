// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution(int testcase) {
       long n = fs.Int();
       long x = fs.Int() - 1;
       long y = fs.Int() - 1;
       long c = fs.Int();
       long res = 0;
       long l = 1, r = c;
       if(c<=1){
           out.println(0);
           return;
       }

       while(l<=r){
           long mid = l +(r - l)/ 2;
           if(check(n,x,y,c,mid)){
               res =mid;
               r=mid-1;
           }
           else{
               l = mid + 1;
           }
       }
       out.println(res);

    }

    public boolean check(long n,long x,long y,long c,long mid){
        long end = 1l + 2l * mid;
        long sum = (1l + end) * (mid + 1l) / 2;

        sum = sum * 2l - end;//without overflow


        long left = x;
        long right = n - (x + 1);
        if(mid > right){
            long xx = mid - right;
            sum = sum - (1l + (1l + 2l * (xx-1))) * xx / 2;
        }

        if(mid > left){
            long xx = mid - left;
            sum = sum - (1l + (1l + 2l * (xx-1))) * xx / 2;
        }

        long up = y + 1l;
        long down = n - (y);
        long leftcnt = Math.min(mid,x);
        long rightcnt = Math.min(mid,n - (x+1l));


        if(mid > up){
            long b = mid - up;
            long a = Math.max(1,b - leftcnt + 1);
            long count = (b - a) + 1;
            long s = (a + b) * count / 2;
            sum-=s;

        }

        if(mid > down){
            long b = mid - down;
            long a = Math.max(1,b - leftcnt + 1);
            long count = (b - a) + 1;
            long s = (a + b) * count / 2;
            sum-=s;

        }

        if(mid > up){
            long b = mid - up;
            long a = Math.max(1,b - rightcnt + 1);
            long count = (b - a) + 1;
            long s = (a + b) * count / 2;
            sum-=s;

        }

        if(mid > down){
            long b = mid - down;
            long a = Math.max(1,b - rightcnt + 1);
            long count = (b - a) + 1;
            long s = (a + b) * count / 2;
            sum-=s;

        }



        if(mid > y){
            sum -= (mid - y);
        }

        if(mid > (n - y - 1)){
            sum -= (mid - (n - y - 1l));
        }

        return sum >= c;
    }

}
