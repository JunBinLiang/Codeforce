#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;



int dp[103][103][103];
ll fact[110];
long c[101][101];

int dfs(int n, int m, int k) {
  if(m > n) {
    if(k == 0) {  
      return (int)(fact[n]);
    }
    return 0;
  }

  if(m == 1) {
    if(k != 1) return 0;
    return (int)(fact[n]);
  }

  if((k - 1) * 2 > n) {
    return 0;
  }


  

  if(dp[n][m][k] != -1) {
    return dp[n][m][k];
  }

  int res = 0;
  for(int i = 1; i <= n ; i++) {
    ll sum = 0;
    for(int j = 0; j <= k; j++) {
      sum += (1ll * dfs(i - 1, m - 1, j) * dfs(n - i, m - 1, k - j ));
      sum %= mod;
    }
    //ways to distribute (n - 1) number
    res += ((int)((sum * c[n - 1][i - 1]) % mod));
    res %= mod;
  }
  
  return dp[n][m][k] = res;
}

void solve(int n, int m, int k, int p) {
  mod = p;
  memset(dp, -1, sizeof(dp));
  c[0][0] = c[1][0] = c[1][1] = 1;
  for (int i = 2; i <= n; i++)
  {
      c[i][0] = c[i][i] = 1;
      for (int j = 1; j <= i - 1; j++)
      {
          c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod;
      }
  }
  
  fact[0] = fact[1] = 1;
  FOR(i, 2, 105) {
    fact[i] = fact[i - 1] * i;
    fact[i] %= mod;
  }
  
  ll res = dfs(n, m, k);
  cout << res << endl;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    int n, m, k, p;
    cin >> n >> m >> k >> p;
    solve(n, m, k,p);
  }

  return 0;
}
