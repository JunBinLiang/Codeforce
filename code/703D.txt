// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 998244353;
    //int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
       int n = fs.Int();
       int A[]=new int[n];
       for(int i =0;i<n;i++){
           A[i]=fs.Int();
       }
       int pre[]=new int[n];
       int xor = 0;
       for(int i = 0;i<n;i++){
           xor ^= A[i];
           pre[i] = xor;
       }

       int m = fs.Int();
       int res[]=new int[m];
       int q[][]=new int[m][3];
       for(int i =0;i<m;i++){
           q[i][0]=fs.Int()-1;
           q[i][1]=fs.Int()-1;
           q[i][2]=i;
       }

       Arrays.sort(q,(a,b)->{
           return a[1]-b[1];
       });


       int j = 0;
       Map<Integer,List<Integer>>f=new HashMap<>();
       FenWick fen = new FenWick(n);
       for(int i = 0; i < n;i++){
           if(!f.containsKey(A[i])){
               f.put(A[i],new ArrayList<>());
           }
           List<Integer>list=f.get(A[i]);
           list.add(i);
           fen.update(i,A[i]);
           if(list.size()>1){
               int size=list.size();
               int x = list.get(size-2);
               fen.update(x,A[i]);
           }

           while(j<q.length&&q[j][1]==i){
               int pair[]=q[j];
               int l =pair[0],r=pair[1],index=pair[2];
               int xor1 = get(pre,l,r);
               int xor2 = fen.sumRange(l,r);
               res[index]=xor1^xor2;
               j++;
           }
       }
       for(int i :res){
           out.println(i);
       }
    }

    public int get(int A[],int l,int r){
        if(l==0)return A[r];
        return A[r] ^ A[l - 1];
    }
}


class FenWick {
    int tree[];//1-index based
    public FenWick(int n) {
        tree=new int[n+1];
        int sum=0;
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]^=val;
            i+=(i&-i);
        }
    }

    public int sumRange(int i, int j) {
        return pre(j+1)^pre(i);
    }

    public int pre(int i){
        int sum=0;
        while(i>0){
            sum^=tree[i];
            i-=(i&-i);
        }
        return sum;
    }
}
