// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution() {

        int n =fs.Int();
        int m =fs.Int();

        int A[][]=new int[n][2];
        int arr[]=new int[1000000+100];
        FenWick fen = new FenWick(arr);
        for(int i = 0;i<n;i++){
            A[i][0]=fs.Int();
            A[i][1]=fs.Int();
            int end = A[i][1];
            fen.update(end,1);
        }

        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });





        int res[]=new int[m];
        Arrays.fill(res,n);
        List<int[]>in=new ArrayList<>();
        for(int i = 0; i < m;i++){
            int k = fs.Int();
            List<Integer>list=new ArrayList<>();
            int pre = - 1;

            for(int j = 0; j < k;j++){
                int a = fs.Int();
                in.add(new int[]{pre+1,a-1,i});
                pre = a;
            }
            in.add(new int[]{pre+1,1000000+10,i});
        }
        Collections.sort(in,(a,b)->{
            return a[0]-b[0];
        });


        int j = 0;
        for(int pair[]:in){
            int l = pair[0],r=pair[1],id=pair[2];
            if(l>r)continue;
            while(j<A.length&&A[j][0]<l){
                fen.update(A[j][1],-1);
                j++;
            }

            int sum = fen.sumRange(0,r);
            res[id]-=sum;
        }


        for(int i:res){
            out.println(i);
        }
    }


    class FenWick {
        int tree[];//1-index based
        int A[];
        int arr[];
        public FenWick(int[] A) {
            this.A=A;
            arr=new int[A.length];
            tree=new int[A.length+1];
            int sum=0;
            for(int i=0;i<A.length;i++){
                update(i,A[i]);
            }
        }

        public void update(int i, int val) {
            arr[i]=+val;
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }

        public int sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }

        public int pre(int i){
            int sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }
}






