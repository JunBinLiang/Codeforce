



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 1000000007;
    int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }



    public void solution(int all, int testcase) {
        int k = fs.Int();
        int n = fs.Int();
        int A[] = new int[n];
        for(int i = 0; i < n; i++) {
            A[i] = fs.Int();
        }
        Arrays.sort(A);
        int B[][] = new int[n - 1][2];
        for(int i = 1; i < n; i++) {
            B[i - 1][0] = A[i] - A[i - 1];
            B[i - 1][1] = i;
        }
        Arrays.sort(B, (a, b) -> {
            return a[0] - b[0];
        });

        List<int[]>list=new ArrayList<>();
        for(int i = 0; i < Math.min(B.length, 3 * k + 5); i++) {
            list.add(B[i]);
        }

        Collections.sort(list,(a,b)->{
            return a[1] - b[1];
        });


        long res = Long.MAX_VALUE;
        long dp[][] = new long[4][k + 1];
        for(long p[]:dp){
            Arrays.fill(p, INF);
        }

        for(int i = 0; i < list.size(); i++) {
            int pair[] = list.get(i);
            //System.out.println(Arrays.toString(pair));
            dp[i % 3][0] = 0;
            if(i == 0) {
                dp[0][1] = pair[0];
                res = Math.min(res, dp[i % 3][k]);
                continue;
            }

            for(int j = 1; j <= k; j++) {
                if(pair[1] - 1 != list.get(i-1)[1]) {
                    dp[i % 3][j] = Math.min(dp[i % 3][j], dp[(i - 1 + 3) % 3][j - 1] + pair[0]);
                    dp[i % 3][j] = Math.min(dp[i % 3][j], dp[(i - 1 + 3) % 3][j]);
                } else {
                    dp[i % 3][j] = Math.min(dp[i % 3][j], dp[(i - 1 + 3) % 3][j]);
                }

                if(i - 2 >= 0) {
                    dp[i % 3][j] = Math.min(dp[i % 3][j], dp[(i - 2 + 3) % 3][j]);
                    dp[i % 3][j] = Math.min(dp[i % 3][j], dp[(i - 2 + 3) % 3][j - 1] + pair[0]);
                }
            }
            res = Math.min(res, dp[i % 3][k]);
        }
        out.println(res);
    }



}

