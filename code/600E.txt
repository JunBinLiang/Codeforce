// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    List<Integer>graph[];
    int A[];
    long res[];
    int maxs[];
    public void solution(int testcase) {
        int n = fs.Int();
        A=new int[n];
        res=new long[n];maxs=new int[n];
        for(int i = 0;i<n;i++){
            A[i]=fs.Int();
        }
        graph=new ArrayList[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i = 0;i<n-1;i++){
            int u =fs.Int()-1;
            int v=fs.Int()-1;
            graph[u].add(v);
            graph[v].add(u);
        }

        dfs(-1,0);
        for(long i:res){
            out.println(i);
        }
    }

    public Map<Integer,Integer> dfs(int pa,int root){
        Map<Integer,Integer>f=new HashMap<>();
        f.put(A[root],1);
        long sum = A[root];
        int mx= 1;
        for(int next:graph[root]){
            if(next==pa)continue;
            Map<Integer,Integer>g = dfs(root,next);
            //merge
            int nextmax = maxs[next];
            if(g.size()>f.size()){//swap
                Map<Integer,Integer>temp=f;
                f=g;
                g=temp;
                int te = mx;
                mx = nextmax;
                nextmax = mx;
                sum = res[next];
            }
            

            for(Integer key : g.keySet()){
                int cnt = g.get(key);
                if(f.containsKey(key)){
                    int add = f.get(key)+cnt;
                    f.put(key,add);
                    if(add>=mx){
                        if(add>mx){
                            sum = key;
                            mx = add;
                        }
                        else{
                            sum+=key;
                        }
                    }
                }
                else{
                    f.put(key,cnt);
                    if(cnt>=mx){
                        if(cnt>mx){
                            sum = key;
                            mx = cnt;
                        }
                        else{
                            sum+=key;
                        }
                    }
                }
            }
        }

        res[root]=sum;
        maxs[root]=mx;
        return f;
    }

}




