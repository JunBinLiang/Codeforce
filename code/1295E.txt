// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n = fs.Int();
        int A[]=new int[n];
        int B[]=new int[n];
        for(int i = 0; i < n;i++){
            A[i]=fs.Int();
        }
        for(int i = 0; i < n;i++){
            B[i]=fs.Int();
        }

        long res1 = solve(A,B);
        long res = (Math.min(B[0],Math.min(res1,B[n-1])));
        out.println(res);
    }


    public long solve(int A[],int B[]){
        int n = A.length;
        long lsum = 0;
        long res = Long.MAX_VALUE;
        Seg seg = new Seg(0, n - 2);//cut
        Map<Integer,Integer>f=new HashMap<>();
        for(int i = 0; i < n; i++){
            f.put(A[i],i);
        }
        long rsum = B[f.get(1)];

        for(int i = 0; i < n - 1; i++){
            if(A[i]==1){
                rsum = 0;
            }
            else{
                lsum += B[i];
            }
            long w = lsum + rsum;
            seg.update(i,i,w);
            res = Math.min(res,w);
        }

        for(int i = 2; i < n; i++){
            int pos = f.get(i);
            if(pos>0){
                seg.update(0,pos-1,B[pos]);
            }
            if(pos<=n-2){
                seg.update(pos,n-2,-B[pos]);
            }


            res = Math.min(res,seg.query(0,n-2));
        }
        return res;
    }

    public void dfs(Seg seg){
        if(seg==null)return;
        dfs(seg.left);
        dfs(seg.right);
        System.out.println(seg.l+" "+seg.r+"  "+seg.min+"  "+seg.setTo);
    }

    public void print(Seg seg,int n){
        for(int i=0;i<n;i++){
            System.out.print(seg.query(i,i)+" ");
        }System.out.println();
    }



    class Seg{
        int l,r;
        long min=0;
        long setTo=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }

        public long query(int s,int e){
            if(l==s&&r==e){
                return this.min;
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(setTo!=0){//push down
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.min=Math.min(left.min,right.min);
                this.setTo=0;
            }

            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int s,int e,long add){
            if(l==s&&r==e){
                this.setTo+=add;
                this.min+=add;
                return;
            }
            int mid=l+(r-l)/2;

            if(setTo!=0){//push down
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.min=Math.min(left.min,right.min);
                this.setTo=0;
            }

            if(e<=mid){
                left.update(s,e,add);
            }
            else if(s>=mid+1){
                right.update(s,e,add);
            }else{
                left.update(s,mid,add);
                right.update(mid+1,e,add);
            }
            this.min=Math.min(left.min,right.min);

        }

        public long get(){
            return this.setTo;
        }
    }


}
