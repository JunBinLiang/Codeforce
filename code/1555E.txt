// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            int A[][]=new int[n][3];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=Int();
                A[i][2]=Int();
            }

            Solution sol1=new Solution(out);
            sol1.solution(A,m);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int A[][],int m) {
        Arrays.sort(A,(a,b)->{
            return a[2]-b[2];
        });
        int res=Integer.MAX_VALUE;
        Seg seg=new Seg(0,m+1);

        //for(int p[]:A)System.out.println(Arrays.toString(p));

        for(int i = 0, j = 0; i<A.length;i++){
            A[i][1]=Math.min(A[i][1],m);
            int l =A[i][0],r=A[i][1];
            seg.update(l,r-1,1);
            while(true){
                int mn = seg.query1(1,m-1);

                if(mn==0){
                    break;
                }
                else{
                    res=Math.min(res,A[i][2]-A[j][2]);
                    int p[]=A[j];
                    seg.update(A[j][0],A[j][1]-1,-1);
                    j++;
                }
            }
        }
        out.println(res);
    }



    class Seg{
        int l,r;
        int min=0;
        int setTo=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }


        public int query1(int s,int e){//min
            if(e<0||s<0)return 0;

            if(l==s&&r==e){
                return this.min;
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query1(s,e)+this.setTo;
            }
            else if(s>=mid+1){
                return right.query1(s,e)+this.setTo;
            }else{
                return Math.min(left.query1(s,mid),right.query1(mid+1,e))+this.setTo;
            }
        }


        public void update(int s,int e,int val){
            if(e<0||s<0||s>e)return;
            if(l==s&&r==e){//whole subtree : setTo
                this.setTo+=val;
                this.min+=val;
                return;
            }

            int mid=l+(r-l)/2;
            if(setTo!=0){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.setTo=0;
            }
            if(e<=mid){
                left.update(s,e,val);
            }
            else if(s>=mid+1){
                right.update(s,e,val);
            }else{
                left.update(s,mid,val);
                right.update(mid+1,e,val);
            }
            this.min=Math.min(left.min,right.min)+this.setTo;
        }
    }
}



