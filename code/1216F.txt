// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int k=Int();
            String s=Str();
            Solution sol1=new Solution(out,fs);
            sol1.solution(s,k);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution(String s,int k) {
        char A[]=s.toCharArray();
        int n =A.length;
        List<int[]>lines=new ArrayList<>();
        for(int i=0;i<A.length;i++){
            if(A[i]=='1'){
                lines.add(new int[]{Math.max(1,i+1-k),Math.min(A.length,i+1+k),i+1});
            }
            else{
                lines.add(new int[]{i+1,i+1,i+1});
            }
        }

        Collections.sort(lines,(a,b)->{
            return a[0]-b[0];
        });

        long dp[]=new long[n+1];
        Arrays.fill(dp,1000000000000l);
        dp[0]=0;
        Seg seg=new Seg(0,dp.length-1);
        seg.update(0,0);

        for(int i=0;i< lines.size();i++){
            int pair[]=lines.get(i);
            int l = pair[0],r=pair[1],cost=pair[2];

            long mn =seg.query(l-1,A.length-1);

            dp[r]=Math.min(dp[r],mn+cost);
            seg.update(r,dp[r]);

            //System.out.println(Arrays.toString(pair));
            //System.out.println(Arrays.toString(dp));
            //System.out.println();
        }

        out.println(dp[n]);
    }

    class Seg{
        int l,r;
        long min=10000000000000l;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }
        public long query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,long val){
            if(l==r){
                min=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.min=Math.min(left.min,right.min);
        }
    }


}



