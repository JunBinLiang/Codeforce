#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;


bool inside(ll l1, ll r1, ll l2, ll r2) {
  if(l1 >= l2 && r1 <= r2) {
    return 1;
  }
  return 0;
}

bool overlap(ll l1, ll r1, ll l2, ll r2) {
  return r1 > l2 && l1 < r2;
}

void solve() {
  ll n, k;
  cin >> n >> k;
  ll l1, r1, l2, r2;
  cin >> l1 >> r1 >> l2 >> r2;
  
  bool a = inside(l1, r1, l2, r2);
  bool b = inside(l2, r2, l1, r1);
  if(b) {
    a = true;
    swap(l1,l2);
    swap(r1,r2);
  }

  //cout << l1 << " " << r1 << " " << l2 << " " << r2 << "  s" << endl;

  if(a) {
    ll over = (r1 - l1);
    if(over * n >= k) {
      cout << 0 << endl;
      return;
    } else {
      ll need = (k + 0l) - over * n;
      ll extend = ((r2 - l2) - (r1 - l1) + 0ll) * n;
      if(extend >= need) {
        cout << need << endl;
        return;
      } else {
        ll x = extend;
        need -= extend;
        x += (need * 2);
        cout << x << endl;
        return;
      }
    }
  }


  bool c = overlap(l1, r1, l2, r2);
  bool d = overlap(l2, r2, l1, r1);
  //cout << c << "  " << d << " a" << endl;
  if(c || d) {
      ll ll1 = min(l1, l2);
      ll ll2 = max(l1, l2);
      ll rr1 = min(r1, r2);
      ll rr2 = max(r1, r2);
      l1 = ll1;
      l2 = ll2;
      r1 = rr1;
      r2 = rr2;

      ll over = r1 - l2;

    

      if(over * n >= k) {
        cout << 0 << endl;
        return;
      } else {
        ll res = 10000000000000000ll;
        ll need = (k + 0l) - over * n;
        ll extend = (r2 - l1 - over);

       // cout << l1 << " " << r1 << "  " << l2 << "  " << r2 << "  " << over << "  " << extend << "  " << need << endl;  

        for(int i = 1; i <= n; i++) {
          ll add = extend * i;
          ll remain = need - add;
          if(add >= need) {
            res = min(res, need);
          } else {
            res = min(res, add + remain * 2);
          }
        }
        cout << res << endl;
      }


  } else {
    ll res = 10000000000000000ll;
    ll ll1 = min(l1, l2);
    ll ll2 = max(l1, l2);
    ll rr1 = min(r1, r2);
    ll rr2 = max(r1, r2);
    l1 = ll1;
    l2 = ll2;
    r1 = rr1;
    r2 = rr2;
    ll dis = l2 - r1;
    ll get = r2 - l1;


    for(int i = 1; i <= n; i++) {
        long add = get * i;
        ll x = dis * i;
        if(add >= k) {
          res = min(res, dis * i + (k + 0l));
        } else {
          ll need = (k + 0l) - add;
          res = min(res, (dis + get) * i + need * 2);
        }
    }
    cout << res << endl;
  }

}

int main()
{
  int t;
  cin >> t;
  while(t--) {
    solve();
  } 

  return 0;
}

