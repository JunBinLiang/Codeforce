// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    int mod = 1000000009;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    List<Integer>graph[];
    List<int[]>res=new ArrayList<>();
    boolean seen[];
    int col[];
    int in[];
    public void solution() {
       int n = fs.Int();
       int A[]=new int[n];
       in = new int[n];
       for(int i = 0; i < n;i++){
           A[i]=fs.Int()-1;
       }
       col = new int[n];
       seen=new boolean[n];
       graph=new ArrayList[n];
       Arrays.setAll(graph,e->new ArrayList<>());


       for(int i = 0; i < n;i++){
           int u =i;
           int v =A[i];
           graph[u].add(v);
           in[v]++;
       }

       List<Integer>start=new ArrayList<>();
       List<Integer>end=new ArrayList<>();
      // System.out.println(Arrays.toString(in));
       for(int i = 0; i < n;i++){
           if(in[i]==0){
               dfs(i);
               start.add(i);
               end.add(col[i]);

           }
       }

       //System.out.println(Arrays.toString(seen));
        boolean is =false;
       for(int i = 0; i < n;i++){
           if(!seen[i]){
               dfs(i);
               start.add(i);
               end.add(col[i]);
               is=true;
           }
       }


        if(start.size()==1&&is){
            out.println(0);
            return;
        }

        int m = start.size();
        out.println(start.size());
        for(int i = 0; i < m;i++){
            out.println((end.get(i)+1)+" "+(start.get((i+1)%m)+1));
        }
    }


    public int dfs(int root){
        seen[root]=true;
        for(int next:graph[root]){
            if(seen[next]){
                return col[root]=next;
            }
            col[root]=dfs(next);
        }
        return col[root];
    }





}

