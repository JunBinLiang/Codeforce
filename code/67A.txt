// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    int res[];
    List<Integer>graph[];
    public void solution(int testcase) {
        int n = fs.Int();
        String s = fs.Str();
        char A[]=s.toCharArray();
        int in[]=new int[A.length+1];
        res=new int[in.length];
        graph=new ArrayList[in.length];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i = 0; i < A.length;i++){
            if(A[i]=='L'){
                graph[i].add(i+1);
                in[i+1]++;
            }
            else if(A[i]=='R'){
                graph[i+1].add(i);
                in[i]++;
            }
            else{
                int j = i;
                List<Integer>list=new ArrayList<>();
                while(j<A.length&&A[j]=='='){
                    list.add(j);
                    j++;
                }
                list.add(j);

                if(i-1>=0){
                    if(A[i-1]=='L'){
                        for(int x:list){
                            in[x]++;
                            graph[i-1].add(x);
                        }
                    }
                    else{
                        for(int x:list){
                            in[i-1]++;
                            graph[x].add(i-1);
                        }
                    }
                }

                if(j<A.length){
                    if(A[j]=='R'){
                        for(int x:list){
                            graph[j + 1].add(x);
                            in[x]++;
                        }
                    }
                    else{

                    }
                }
                i = j - 1;
            }
        }

        for(int i = 0; i < in.length;i++){
            if(in[i]==0){
                dfs(i);
            }
        }

        for(int i = 0; i < A.length;i++){
            if(A[i]!='=')continue;
            int j = i;
            int mx = 0;
            while(j < A.length&&A[j]=='='){
                mx = Math.max(mx, res[i]);
                j++;
            }
            mx = Math.max(mx, res[j]);
            for(int x = i; x <= j; x++){
                res[x]=mx;
            }
            i = j - 1;
        }


        for(int i:res){
            out.print(i+" ");
        }
    }

    public int dfs(int root){
        if(res[root]!=0)return res[root];
        int mx = 0;
        for(int next:graph[root]){
            int val = dfs(next);
            mx = Math.max(mx,val);
        }
        res[root]+=mx+1;
        return res[root];
    }

}
