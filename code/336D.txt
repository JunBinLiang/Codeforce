// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n =fs.Int();
        int m =fs.Int();
        int g = fs.Int();
        long f[]=new long[n+m+10];
        f[0]=1;
        for(int i = 1;i<f.length;i++){
            f[i]=f[i - 1] * i;
            f[i] %= mod;
        }

        if(n==0){
            if(g==0){
                if(m>1)out.println(1);
                else out.println(0);
            }
            else{
                if(m==1)out.println(1);
                else out.println(0);
            }
            return;
        }
        if(m==0){
            if(g==0){
                if(n%2==1)out.println(1);
                else out.println(0);
            }
            else{
                if(n%2==0)out.println(1);
                else out.println(0);
            }
            return;
        }


        long all = C(f,n+m,n);
        long zero = 0 ;

        for(int i = 0; i <= n; i+=2){
            if(m==1&&n-i==0){
                break;
            }
            zero += C(f,n+m-i - 1,n-i);
            zero %= mod;
        }

        if(n%2==1&&m==1){
            zero++;
        }

        if(g==0){
            out.println(zero);
        }else{
            out.println((all+mod-zero)%mod);
        }
    }

    public long C(long fact[],int i,int j){ // C(20,3)=20!/(17!*3!)
        //return fact[i].divide(fact[i-j].multiply(fact[j]));
        long a=fact[i];
        long b=((fact[i-j]%mod)*(fact[j]%mod))%mod;
        BigInteger B= BigInteger.valueOf(b);
        long binverse=B.modInverse(BigInteger.valueOf(mod)).longValue();
        return ((a)*(binverse%mod))%mod;
    }
}
