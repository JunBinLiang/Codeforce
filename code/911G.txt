// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            int m=Int();
            int q[][]=new int[m][4];
            for(int i=0;i<q.length;i++){
                for(int j=0;j<4;j++){
                    q[i][j]=Int();
                }
            }

            Solution sol1=new Solution(out);
            sol1.solution(A,q);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }

    int res[];
    int A[];
    int tree[][];
    boolean push[];
    public void solution(int A[],int q[][]) {
        this.A=A;
        int height = (int) Math.ceil(Math.log(A.length) / Math.log(2));
        res=new int[A.length];
        tree=new int[4*A.length][101];
        push=new boolean[tree.length];
        build(0,A.length-1,0);

        for(int p[]:q){
            int l=p[0]-1,r=p[1]-1,x=p[2],y=p[3];
            if(x==y)continue;
            update(0,A.length-1,l,r,x,y,0);
        }


        dfs(0,A.length-1,0);
        StringBuilder str=new StringBuilder();
        for(int i:res){
            str.append(i+" ");
        }
        out.println(str.toString());
    }



    public void dfs(int l,int r,int id){
        if(l==r){
            res[l]=tree[id][A[l]];
            return;
        }


        int left=id*2+1;
        int right=left+1;
        pushdown(id);
        int mid = l+(r-l)/2;
        dfs(l,mid,left);
        dfs(mid+1,r,right);
    }



    public void build(int l,int r,int id){
        for(int i=1;i<=100;i++){
            tree[id][i]=i;
        }
        if(l!=r){
            int mid=l+(r-l)/2;
            int left=id*2+1;
            int right=left+1;
            build(l,mid,left);
            build(mid+1,r,right);
        }
        else{

        }

    }

    public void update(int l,int r,int s, int e, int x ,int y,int id){
        int mid=l+(r-l)/2;
        int left=id*2+1;
        int right=left+1;

        if(l==s&&e==r){
            for(int i=1;i<=100;i++){
                if(tree[id][i]==x){
                    tree[id][i]=y;
                }
            }
            if(l!=r){
                push[id]=true;
            }
            return;
        }

        pushdown(id);

        if(e<=mid){
            update(l,mid,s,e,x,y,left);
        }
        else if(s>=mid+1){
            update(mid+1,r,s,e,x,y,right);
        }
        else{
            update(l,mid,s,mid,x,y,left);
            update(mid+1,r,mid+1,e,x,y,right);
        }
    }

    public void pushdown(int id){
        if(!push[id])return;

        int left = id*2+1;
        int right = id*2+2;
        push[id]=false;
        push[left]=push[right]=true;
        for(int i=1;i<=100;i++){
            tree[left][i]=tree[id][tree[left][i]];
            tree[right][i]=tree[id][tree[right][i]];
        }
        //reset
        for(int i=1;i<=100;i++){
            tree[id][i]=i;
        }
    }
}
