// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int A[]=Arr(26);
            String s=Str();

            Solution sol=new Solution(out);
            sol.solution(A,s);
        }
        out.close();

    }




    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int f[],String s) {
        char A[]=s.toCharArray();
        List<Integer>pos[]=new ArrayList[26];
        Arrays.setAll(pos,e->new ArrayList<>());
        long pre[]=new long[A.length];
        long sum=0;

        for(int i=0;i<A.length;i++){
            pos[A[i]-'a'].add(i);
            sum+=f[A[i]-'a'];
            pre[i]=sum;
        }

        long res = 0;

        for(int i=0;i<26;i++){
            List<Integer>list=pos[i];
            if(list.size()<=1)continue;


            Map<Long,Integer>map=new HashMap<>();
            int first = list.get(0);
            long target=f[i]*2;
            map.put(get(pre,0,first-1),1);

            for(int j=1;j<list.size();j++){
                int index=list.get(j);
                long total=pre[index];
                

                if(map.containsKey(total-target)){
                    res+=map.get(total-target);
                }

                if(!map.containsKey(total-f[i]))map.put(total-f[i],0);
                map.put(total-f[i],map.get(total-f[i])+1);
            }



        }


        out.println(res);
    }

    public long get(long A[],int l,int r){
        if(l>r)return 0;
        if(l==0)return A[r];
        else return A[r]-A[l-1];
    }

}








