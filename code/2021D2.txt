// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            long C=Long();

            long A[][]=new long[n][2];
            for(int i=0;i<A.length;i++){
                for(int j=0;j<A[0].length;j++){
                    A[i][j]=Long();
                }
            }


            Solution sol1=new Solution(out);
            sol1.solution(A,C,t+1);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(long A[][],long C,int t) {
        long res = A.length;
        TreeMap<Long,Integer>f=new TreeMap<>();
        for(long pair[]:A){
            if(pair[1]-pair[0]<=1)continue;
            long l=pair[0]+1,r=pair[1];
            if(!f.containsKey(l)){
                f.put(l,0);
            }
            f.put(l,f.get(l)+1);

            if(!f.containsKey(r)){
                f.put(r,0);
            }
            f.put(r,f.get(r)-1);
        }

        long sum = 0;
        long p = -1;
        PriorityQueue<long[]>pq=new PriorityQueue<>((a,b)->{
            return Long.compare(b[2],a[2]);
        });


       // System.out.println(f);

        for(Long k:f.keySet()){
            if(p==-1){
                p=k;
                sum+=f.get(k);
            }
            else{
                pq.add(new long[]{p,k-1,sum});
                sum+=f.get(k);
                p=k;
            }
           // System.out.println(sum);
        }

        while(pq.size()>0&&C>0){
            long top[]=pq.poll();
            long len = top[1]-top[0]+1;
            if(C>=len){
                C-=len;
                res += len*top[2];
            }
            else{
                res+=C*top[2];
                C=0;
            }
        }

        print(res,t);
    }

    public void print(long ans,int t){
        out.print("Case #"+t+": "+ans);
        out.println();
    }


}


//0 1 2 3
//3 0 1 2
//2 3 0 1
//1 2 3 0
