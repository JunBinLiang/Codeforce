



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 1000000007;
    int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }




    public void solution(int all, int testcase) {
        int m = fs.Int();
        int A[] = new int[m];
        Seg seg = new Seg(0, m - 1);
        for(int i = 0; i < m; i++) {
            int index = fs.Int() - 1;
            int type = fs.Int();
            if(type == 1) { //push
                int val = fs.Int();
                seg.update(index,1);
                A[index] = val;
            }
            else{//pop
                seg.update(index,-1);
            }
            int j = dfs(seg, 0);
            if(j != -1) {
                out.println(A[j]);
            }else{
                out.println(-1);
            }
        }
    }

    public int dfs(Seg seg, int add) {
        if(seg.left==null&&seg.right==null){
            if(seg.max == 1) {
                return seg.l;
            } else {
                return -1;
            }
        }

        int lmax = seg.left.max;
        int rmax = seg.right.max;
        if(rmax + add > 0) {
            return dfs(seg.right, add);
        }
        if(lmax + add + seg.right.sum > 0) {
            return dfs(seg.left, add + seg.right.sum);
        }
        return -1;
    }


    class Seg{
        int l,r;
        int max=0;
        int sum = 0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                //System.out.println(l+" "+r);
            }
        }


        public void update(int index,int val){
            if(l==r){
                this.max=val;
                this.sum = val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }

            this.sum = left.sum+right.sum;
            this.max=Math.max(right.max,left.max + right.sum);

        }
    }


}


