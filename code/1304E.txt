// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    List<Integer>graph[];
    int levels[];
    int f[][];
    public void solution() {
        int n = fs.Int();
        graph=new ArrayList[n];
        levels=new int[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        f=new int[n][21];
        for(int i = 0; i < n - 1;i++){
            int u =fs.Int()- 1;
            int v= fs.Int() - 1;
            graph[u].add(v);
            graph[v].add(u);
        }

        for(int p[]:f){
            Arrays.fill(p,-1);
        }

        dfs(-1,0,0);

        //construc sparse table

        for(int i=1;i<f[0].length;i++){//construc sparse table
            for(int j=0;j<n;j++){
                int parent=f[j][i-1];
                if(parent!=-1&&f[parent][i-1]!=-1){
                    f[j][i]=f[parent][i-1];
                }
            }
        }

        int m =fs.Int();

        for(int i = 0;i<m;i++){
            int x = fs.Int()-1;int y = fs.Int()-1;
            int a = fs.Int()-1;int b = fs.Int()-1;
            int k =fs.Int();

            int lca =LCA(a,b);
            int d1 = dis(a,x,LCA(a,x));

            int d2 = dis(a,b,lca);
            if(d2<=k&&(k-d2)%2==0){
                out.println("YES");
                continue;
            }

            //a->x-
            int lca2 = LCA(b,x);
            int d3 = dis(b,x,lca2);

            //a-x,x->b
            if(d1+d3<=k&&(k-(d1+d3))%2==0){
                out.println("YES");
                continue;
            }

            int lca3 = LCA(b,y);
            int d4 = dis(b,y,lca3);
            if(d1+1+d4<=k&&(k-(d1+d4+1))%2==0){
                out.println("YES");
                continue;
            }

            //a y y x b
            int lca4 = LCA(a,y);
            int d5 = dis(a,y,lca4);
            if(d3+1+d5<=k&&(k-(d3+1+d5))%2==0){
                out.println("YES");
                continue;
            }

            //System.out.println(i+" "+lca3+"    "+d1+"   "+d4+"  "+(d1+1+d4));

            out.println("NO");
        }

    }


    public int dis(int a,int b,int lca){
        return levels[a]+levels[b]-2 * levels[lca];
    }

    public int LCA(int x,int y){
        if(levels[x]<levels[y]){
            return LCA(y,x);
        }


        for(int i=20; i>=0; i--) {
            if(f[x][i]!=-1&&levels[f[x][i]] >= levels[y]) {
                x = f[x][i];
            }
        }
        if(x == y) return x;


        for(int i=20; i>=0; i--)//不重合，x 和 y 一起往上跳
        {
            if(f[x][i] != f[y][i]) //只要父亲不同，就跳，父亲相同，就停了
            {                    // 最后一次，是没有跳上去的

                x = f[x][i];
                y = f[y][i];
            }
        }
        return f[x][0];
    }


    public void dfs(int pa,int root,int level){
        levels[root]=level;
        for(int next:graph[root]){
            if(pa==next)continue;
            f[next][0]=root;
            dfs(root,next,level+1);
        }
    }
}







