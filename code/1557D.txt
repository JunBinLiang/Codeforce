



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }
}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;
    }


    public void solution(int all, int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        int A[][] = new int[m][3];
        List<Integer> list = new ArrayList<>();
        boolean seen[] = new boolean[n];
        for(int i = 0; i < m; i++) {
            A[i][0] = fs.Int() - 1;
            A[i][1] = fs.Int();
            A[i][2] = fs.Int();
            list.add(A[i][1]);
            list.add(A[i][2]);
            seen[A[i][0]] = true;
        }

        StringBuilder str = new StringBuilder();
        int cnt = 0;
        for(int i = 0; i < seen.length; i++) {
            if(!seen[i]){
                str.append(i  + 1).append(" ");
                cnt++;
            }
        }




        Map<Integer,Integer>f = new HashMap<>();
        Collections.sort(list);
        int id = 0;
        for(int i : list) {
            if(!f.containsKey(i)) {
                f.put(i, id);
                id++;
            }
        }


        Arrays.sort(A, (a, b) -> {
            return a[0] - b[0];
        });
        Seg seg1 = new Seg(0, id + 5);
        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);

        for(int i = 0; i < A.length; i++) {
            int j = i;
            int max = 0;
            while(j < A.length && A[j][0] == A[i][0]) {
                int l = A[j][1], r = A[j][2];
                int index1 = f.get(l), index2 = f.get(r);

                int pair1[] = seg1.query(index1, index2);
                if(pair1[0] + 1 > max) {
                    max = pair1[0] + 1;
                    dp[A[i][0]] = pair1[1];
                }
                j++;
            }

            j = i;
            while(j < A.length && A[j][0] == A[i][0]) {
                int l = A[j][1], r = A[j][2];
                int index1 = f.get(l), index2 = f.get(r);
                seg1.update(index1,index2,max, A[i][0]);
                j++;
            }
            i = j - 1;
        }

        int pair[] = seg1.query(0, id + 1);

       // if(res.size() > 100)System.out.println(res.size() + "  "+(pair[0]));

        int last = pair[1];
        while(last != -1) {
            seen[last] = false;
            last = dp[last];
        }
        for(int i = 0; i < seen.length; i++){
            if(seen[i]) {
                cnt++;
                str.append(i + 1).append(" ");
            }
        }
        out.println(cnt);
        if(cnt > 0)out.println(str.toString());
    }



}

class Seg{
    int l,r;
    int max=0;
    int setTo= -1;int index = -1;
    Seg left=null,right=null;
    public Seg(int l,int r){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new Seg(l,mid);
            if(r>=mid+1)right=new Seg(mid+1,r);
        }else{

        }
    }

    public int[] query(int s,int e){
        if(l==s&&r==e){
            return new int[]{this.max, this.index};
        }

        int mid=l+(r-l)/2; //left :  to mid-1,
        if(setTo!= -1){//push down
            left.update(l,mid,setTo, this.index);
            right.update(mid+1,r,setTo, this.index);
            if(left.max > right.max){
                this.index = left.index;
            } else {
                this.index = right.index;
            }
            this.max=Math.max(left.max,right.max);
            this.setTo = -1;
        }

        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }else{
            int p1[] = left.query(s,mid);
            int p2[] = right.query(mid+1,e);
            if(p1[0] > p2[0]) {
                return p1;
            } else {
                return p2;
            }
        }
    }

    public void update(int s,int e,int val, int i){
        if(l==s&&r==e){
            this.index = i;
            this.setTo = val;
            this.max = val;
            return;
        }
        int mid=l+(r-l)/2;

        if(setTo!=-1){//push down
            left.update(l,mid,setTo, i);
            right.update(mid+1,r,setTo, i);
            this.setTo=-1;
        }

        if(e<=mid){
            left.update(s,e,val, i);
        }
        else if(s>=mid+1){
            right.update(s,e,val, i);
        }else{
            left.update(s,mid,val, i);
            right.update(mid+1,e,val, i);
        }

        if(left.max > right.max){
            this.index = left.index;
        } else {
            this.index = right.index;
        }
        this.max=Math.max(left.max,right.max);

    }

    public int get(){
        return this.setTo;
    }
}








