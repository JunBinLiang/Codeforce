// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    List<Integer>graph[];List<Integer>graph1[];
    boolean seen[];
    int A[];
    int ids[];
    int id = 0;
    int dia = 0;
    public void solution(int testcase) {
        int n = fs.Int();
        A=new int[n];
        ids=new int[n];
        seen = new boolean[n];
        for(int i = 0; i < n; i++){
            A[i]=fs.Int();
        }
        graph=new ArrayList[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int i = 0; i < n - 1; i++){
            int u =fs.Int()-1,v=fs.Int()-1;
            graph[u].add(v);
            graph[v].add(u);
        }

        for(int i = 0; i < n;i++){
            if(!seen[i]){
                seen[i]=true;
                dfs(i);
                id++;
            }
        }

        graph1=new ArrayList[n];
        Arrays.setAll(graph1,e->new ArrayList<>());
        for(int u = 0; u < n; u++){
            int x = ids[u];
            for(int v : graph[u]){
                if(ids[u]==ids[v])continue;
                int y = ids[v];
                graph1[x].add(y);
                graph1[y].add(x);
                //System.out.println(x+"  "+y);
            }
        }

        Arrays.fill(seen,false);
        seen[0]=true;
        dfs1(0);
        out.println(dia/2);
    }

    public int dfs1(int root){

        List<Integer>list=new ArrayList<>();
        for(int next:graph1[root]){
            if(!seen[next]){
                seen[next]=true;
                int a = dfs1(next);
                list.add(a);
            }
        }
        Collections.sort(list);
        Collections.reverse(list);
        if(list.size()==0){
            dia = Math.max(dia,1);
            return 1;
        }

        if(list.size()==1){
            dia = Math.max(dia,1+list.get(0));
            return 1 + list.get(0);
        }
        else{
            dia=Math.max(dia,1+list.get(0)+list.get(1));
            return list.get(0)+1;
        }
    }

    public void dfs(int root){
        ids[root]=id;
        for(int next:graph[root]){
            if(seen[next])continue;
            if(A[next]!=A[root])continue;
            seen[next]=true;
            dfs(next);
        }
    }




}




