// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A,k+1);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000009;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int A[],int K) {
        FenWick fens[]=new FenWick[K+1];
        for(int i=0;i<fens.length;i++){
            int arr[]=new int[A.length+1];
            fens[i]=new FenWick(arr);
        }



        for(int i=0;i<A.length;i++){
            int cur = A[i];
            for(int k=2;k<=K;k++){
                long sum = fens[k-1].sumRange(0,cur-1);
                fens[k].update(cur,sum);
            }
            fens[1].update(cur,1);
        }

        long res = fens[K].sumRange(0,A.length);
        out.println(res);
    }

    class FenWick {
        long tree[];//1-index based
        public FenWick(int[] A) {
            tree=new long[A.length+1];
        }

        public void update(int i, long val) {
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }

        public long sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }

        public long pre(int i){
            long sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }


}
















