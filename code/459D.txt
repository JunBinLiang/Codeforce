// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            Solution sol1=new Solution(out);
            sol1.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int A[]) {
        FenWick fen=new FenWick(A.length+10);


        Map<Integer,Integer>f=new HashMap<>();
        int n = A.length;
        int right[]=new int[n];
        for(int i=n-1;i>=0;i--){
            int cur=A[i];
            if(!f.containsKey(cur))f.put(cur,0);
            f.put(cur,f.get(cur)+1);
            int cnt=f.get(cur);
            right[i]=cnt;
            fen.update(cnt,1);
        }

        long res=0;
        f.clear();
        for(int i=0;i<n;i++){
            int cur=A[i];
            if(!f.containsKey(cur))f.put(cur,0);
            f.put(cur,f.get(cur)+1);
            int cnt=f.get(cur);
            fen.update(right[i],-1);
            res+=fen.sumRange(0,cnt-1);
        }
        out.println(res);
    }


    class FenWick {
        long tree[];//1-index based
        public FenWick(int n) {
            tree=new long[n+1];
            int sum=0;
        }

        public void update(int i, int val) {
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }

        public long sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }

        public long pre(int i){
            long sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }



}
