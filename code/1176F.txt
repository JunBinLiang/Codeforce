// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    long dp[][];
    int sta[][][];
    int B[]=new int[]{1,1,1,2,2,3};
    public void solution() {
        int n = fs.Int();
        List<int[]>turns[] = new ArrayList[n];
        Arrays.setAll(turns,e->new ArrayList<>());
        sta=new int[n][6][3];//[1], [1,1] [2], [3] [1, 1, 1] [1,2]

        for(int i = 0;i<sta.length;i++){
            for(int j = 0;j<sta[0].length;j++){
                Arrays.fill(sta[i][j],-1);
            }
        }


        for(int i = 0;i<n;i++){
            int k = fs.Int();
            List<Integer>a1=new ArrayList<>();
            List<Integer>b1=new ArrayList<>();
            List<Integer>c1=new ArrayList<>();
            for(int j = 0;j<k;j++){
                int c = fs.Int();
                int d = fs.Int();
                if(c==1)a1.add(d);
                if(c==2)b1.add(d);
                if(c==3)c1.add(d);
            }

            Collections.sort(a1);
            Collections.sort(b1);
            Collections.sort(c1);
            Collections.reverse(a1);
            Collections.reverse(b1);
            Collections.reverse(c1);

            if(a1.size()>0){//1
                sta[i][0][0]=a1.get(0);
            }
            if(b1.size()>0){//2
                sta[i][1][0]=b1.get(0);
            }
            if(c1.size()>0){//3
                sta[i][2][0]=c1.get(0);
            }

            if(a1.size()>1){//1 1
                sta[i][3][0]=a1.get(0);
                sta[i][3][1]=a1.get(1);
            }

            if(a1.size()>0&&b1.size()>0){//1 2
                sta[i][4][0]=a1.get(0);
                sta[i][4][1]=b1.get(0);
            }
            if(a1.size()>2){// 1 1 1
                sta[i][5][0]=a1.get(0);
                sta[i][5][1]=a1.get(1);
                sta[i][5][2]=a1.get(2);
            }


        }

        dp=new long[n][11];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        long res=dfs(0,0);
        out.println(res);
    }

    public long dfs(int i,int total){
        total%=10;
        if(i>=sta.length){
            return 0;
        }
        if(dp[i][total]!=-1){
            return dp[i][total];
        }

        long res = 0;
        res=Math.max(res,dfs(i+1,total));


        for(int j = 0; j < 6;j++){
            if(sta[i][j][0]==-1)continue;
            int cnt=B[j];
            long sum = 0;
            long mx = 0;
            for(int k =0;k<cnt;k++){
                mx=Math.max(mx,sta[i][j][k]);
                sum+=sta[i][j][k];
            }
            if(total+cnt>=10){
                sum+=mx;
            }
            res=Math.max(res,sum+dfs(i+1,total+cnt));
        }
        dp[i][total]=res;
        return res;
    }




}









