// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();int s =Int()-1;
            int edges[][]=new int[m][2];


            for(int i=0;i<m;i++){
                edges[i][0]=Int()-1;
                edges[i][1]=Int()-1;
            }

            Solution sol1=new Solution(out);
            sol1.solution(n,edges,s);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }

    List<Integer>graph[];
    boolean seen[];
    int cnt=0;
    public void solution(int n,int edges[][],int s) {
        graph=new ArrayList[n];
        seen=new boolean[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int edge[]:edges){
            graph[edge[0]].add(edge[1]);
        }


        seen[s]=true;
        dfs(s);

        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            return b[1]-a[1];
        });



        for(int i=0;i<n;i++){
            if(!seen[i]){
                cnt=0;
                boolean visit[]=new boolean[n];
                visit[i]=true;
                dfs1(visit,i);
                pq.add(new int[]{i,cnt});
            }
        }



        int res = 0;
        seen=new boolean[n];
        while(pq.size()>0){
            int top[]=pq.poll();
            if(seen[top[0]])continue;
            res++;
            seen[top[0]]=true;
            dfs(top[0]);
        }
        out.println(res);

    }

    public void dfs1(boolean visit[],int root){
        cnt++;
        for(int next:graph[root]){
            if(!visit[next]){
                visit[next]=true;
                dfs1(visit,next);
            }
        }
    }

    public void dfs(int root){
        for(int next:graph[root]){
            if(!seen[next]){
                seen[next]=true;
                dfs(next);
            }
        }
    }






}
