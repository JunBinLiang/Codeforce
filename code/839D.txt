// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    //int mod = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(int testcase) {
        int n = fs.Int();
        int A[]=new int[n];
        int cnts[] = new int[1000000+1];
        int mx = 0;
        for(int i = 0; i < n; i++){
            A[i]=fs.Int();
            cnts[A[i]]++;
            mx = Math.max(mx,A[i]);
        }

        long pow[]=new long[n + 1];
        pow[0]=1;
        for(int i =1;i<pow.length;i++){
            pow[i]=pow[i - 1] * 2;
            pow[i]%=mod;
        }

        long res = 0;
        long dp[]=new long[mx+1];
        for(int i = mx;i>1;i--){
            int x = 0;
            for(int j = i; j <= mx; j+= i) {
                int cnt = cnts[j];
                x+= cnt;
            }

            if(x > 0) {
                dp[i] = pow[x - 1] * x;
                dp[i]%=mod;
            }

            for(int j = i + i; j <= mx; j+= i) {
                dp[i] -= dp[j];
                dp[i] = (dp[i] + mod) % mod;
            }
            res += (dp[i] * i);
            res %= mod;
        }
        out.println(res);
    }


}

//1 * C(cnt,1) + 2 * C(cnt,2) + 3 * C(cnt,3) + ...cnt * Cnt(cnt, cnt)

// 10 * 9 * 8 / 1 * 2 * 3
// 10 * 9 * 8 * 7/ 1 * 2 * 3 * 4



