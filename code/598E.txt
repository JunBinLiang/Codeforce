// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    int dp[][][];
    public void solution() {
        int t = fs.Int();
        dp=new int[52][52][52];
        for(int i = 0; i < dp.length;i++){
            for(int j = 0; j < dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }

        while(t>0){
            t--;
            int n =fs.Int();
            int m =fs.Int();
            int k = fs.Int();
            int res = dfs(n,m,k);
            out.println(res);
        }


    }

    public int dfs(int n,int m,int k){
        if(n * m == k){
            return 0;
        }
        if(k == 0){
            return 0;
        }
        if(n * m < k){//can not cut
            return 1000000;
        }

        if(dp[n][m][k]!=-1){
            return dp[n][m][k];
        }

        //horizontal cut
        int res = 1000000;
        for(int i = 1; i < n; i++){
            for(int l = 0; l <= k; l++){
                int r = k - l;
                res = Math.min(res, m * m + dfs(i,m,l) + dfs(n - i,m,r));
            }
        }

        //vertical cut
        for(int i = 1; i < m; i++){
            for(int l = 0; l <= k; l++){
                int r = k - l;
                res = Math.min(res, n * n + dfs(n,i,l) + dfs(n,m - i,r));
            }
        }

        dp[n][m][k]=res;
        return dp[n][m][k];
    }
}








