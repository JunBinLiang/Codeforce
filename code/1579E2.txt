// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution() {

        int t = fs.Int();
        while(t>0){
            t--;
            int n =fs.Int();
            int A[]=new int[n];
            int B[]=new int[n];
            Map<Integer,Integer>f=new HashMap<>();
            for(int i=0;i<n;i++){
                A[i]= fs.Int();
                B[i]=A[i];
            }
            int id = 1;
            Arrays.sort(B);
            for(int j:B){
                if(!f.containsKey(j)){
                    f.put(j,id++);
                }
            }
            for(int i =0;i<A.length;i++){
                A[i]=f.get(A[i]);
            }

            FenWick fen = new FenWick(id+5);

            long res = 0;
            for(int i = 0; i < A.length;i++){
                int small = fen.sumRange(0,A[i] - 1);
                int large = i - small - fen.sumRange(A[i],A[i]) ;
                //System.out.println(small+" "+large);
                res += Math.min(small,large);
                fen.update(A[i],1);
            }
            out.println(res);
        }
    }
}

class FenWick {
    int tree[];//1-index based
    public FenWick(int n) {
        tree=new int[n+1];
        int sum=0;
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            i+=(i&-i);
        }
    }

    public int sumRange(int i, int j) {
        return pre(j+1)-pre(i);
    }

    public int pre(int i){
        int sum=0;
        while(i>0){
            sum+=tree[i];
            i-=(i&-i);
        }
        return sum;
    }
}
