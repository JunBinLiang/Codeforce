// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int q[][]=new int[n][2];
            for(int i=0;i<q.length;i++){
                String s=Str();
                if(s.equals("+")){
                    q[i][0]=1;
                    q[i][1]=Int();
                }
                else{
                    q[i][0]=2;
                }
            }

            Solution sol=new Solution(out);
            sol.solution(q);
        }
        out.close();

    }




    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = 998244353;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    long dp[][];
    public void solution(int A[][]) {
        int n =A.length;
        dp=new long[n+1][n+1];
        long res = 0;
        for(int i=0;i<A.length;i++){
            if(A[i][0]==1){
                init();
                long cnt = dfs(A,0,0,i);
                res+=(A[i][1]*cnt);
                res%=mod;
            }
        }
        out.println(res);

    }
    public void init(){
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
    }

    public long dfs(int A[][],int i,int cnt,int mid){
        if(i>=A.length){
            return 1;
        }
        if(dp[i][cnt]!=-1)return dp[i][cnt];

        long res = 0;
        if(i==mid){
            res+=dfs(A,i+1,cnt,mid);
        }
        else if(i<mid){
            if(A[i][0]==1){//add
                int cur =A[i][1];
                if(cur<A[mid][1]){
                    res+=dfs(A,i+1,cnt+1,mid);
                }
                else{
                    res+=dfs(A,i+1,cnt,mid);
                }
                //not add
                res%=mod;
                res+=dfs(A,i+1,cnt,mid);
                res%=mod;
            }
            else{
                if(cnt>0){
                    res+=dfs(A,i+1,cnt-1,mid);
                }
                else{
                    res+=dfs(A,i+1,cnt,mid);
                }
                //not subtract
                res%=mod;
                res+=dfs(A,i+1,cnt,mid);
                res%=mod;
            }
        }
        else{
            if(A[i][0]==1){
                int cur =A[i][1];
                if(cur<=A[mid][1]){
                    res+=dfs(A,i+1,cnt+1,mid);
                }
                else{
                    res+=dfs(A,i+1,cnt,mid);
                }
                //not add
                res%=mod;
                res+=dfs(A,i+1,cnt,mid);
                res%=mod;
            }
            else{
                if(cnt>0){
                    res+=dfs(A,i+1,cnt-1,mid);
                }
                res%=mod;
                //not subtract
                res+=dfs(A,i+1,cnt,mid);
                res%=mod;
            }
        }
        dp[i][cnt]=res;
        return res;
    }




}
