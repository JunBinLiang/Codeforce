#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;
vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1, 0}};




int a[1005][1005];
vector<vector<int>> res;
void dfs(int i, int j, int n, int m) {
  if(i + 1 >= n || j + 1 >= m || i < 0 || j < 0) {
    return;
  }



  int c = -1;
  for(int x = i; x <= i + 1; x++) {
    for(int y = j; y <= j + 1; y++) {
      if(a[x][y] == 0) continue;
      if(c == -1) {
         c = a[x][y];
      } else {
        if(c != a[x][y])return;
      }   
    }
  }
  if(c > 0) {


      res.push_back({i, j, c});
      for(int x = i; x <= i + 1; x++) {
        for(int y = j; y <= j + 1; y++) {
          a[x][y] = 0; 
        }
      }

      for(int x = i - 1; x <= i + 1; x++) {
        for(int y = j - 1; y <= j + 1; y++) {
          dfs(x, y, n, m);
        }
      }
  }
}

void solve() {
  int n, m;
  cin >> n >> m;
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < m; j++) {
      cin >> a[i][j];
    }
  }


  int c = -1;
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < m; j++) {
      dfs(i, j, n, m);
    }
  }


  for(int i = 0; i < n; i++) {
    for(int j = 0; j < m; j++) {
      if(a[i][j] != 0) {
        cout << -1 << endl;
        return;
      } 
    }
  }
  reverse(res.begin(), res.end());
  cout << res.size() << "\n";
  for(int i = 0; i < res.size(); i++) {
    cout << res[i][0] + 1 << " " << res[i][1] + 1 <<" " << res[i][2] << "\n";
  }

}

 
int main()
{
  int t = 1;
  //cin >> t;
  while(t--) {
    solve();
  } 

  return 0;
}


