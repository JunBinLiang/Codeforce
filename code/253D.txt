// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        Scanner in=new Scanner(new File("input.txt"));
        PrintWriter pr=new PrintWriter("output.txt");
        int n = in.nextInt();
        int m = in.nextInt();
        int k = in.nextInt();
        char A[][]=new char[n][m];
        for(int i = 0; i < n; i++){
            A[i] = in.next().toCharArray();
        }

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(A,k,pr);
            pr.flush();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution(char A[][],int k,PrintWriter pr) {
        long res = 0;
        int n = A.length, m = A[0].length;
        int dp[][]=new int[n][m];
        for(int i = 0; i < n; i++){
            int sum = 0;
            for(int j = 0; j < m;j++){
                if(A[i][j] == 'a'){
                    sum++;
                }
                dp[i][j]=sum;
            }
        }

        for(int i = 0; i<m;i++){
            for(int j = i+1;j<m;j++){
                List<Integer>lists[]=new ArrayList[26];
                int sums[]=new int[n];
                int sum = 0;

                for(int x = 0; x < n;x++){
                    if(A[x][i]!=A[x][j]){
                        sum += get(dp[x],i,j);
                        sums[x] = sum;
                        continue;
                    }
                    int index = A[x][i]-'a';
                    if(lists[index]==null)lists[index]=new ArrayList<>(400);
                    lists[index].add(x);
                    sum += get(dp[x],i,j);
                    sums[x] = sum;
                }

                for(List<Integer>list:lists){
                    if(list==null||list.size()<2)continue;
                    for(int r = 0, l = 0; r < list.size();r++){
                        if(get(sums,list.get(l),list.get(list.size()-1))<=k){
                            int rcnt = list.size() - r;
                            int window = r - l;
                            res += rcnt * window;
                            res += (rcnt * (rcnt - 1)) / 2;
                            break;
                        }
                        while(l<r && get(sums,list.get(l),list.get(r)) > k){
                            l++;
                        }
                        res +=(r - l);
                    }
                }

            }
        }
        pr.println(res);
    }

    public int get(int A[],int l,int r){
        if(l == 0)return A[r];
        return A[r] - A[l - 1];
    }


}




