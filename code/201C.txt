// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n-1);

            Solution sol1=new Solution(out);
            sol1.solution(n-2,A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int n,int A[]) {
        TreeSet<Integer>tree=new TreeSet<>();
        tree.add(-1);
        tree.add(A.length);
        for(int i=0;i<A.length;i++){
            if(A[i]==1)tree.add(i);
        }
        long res = 0;
        long even[]=new long[A.length];
        long odd[]=new long[A.length];
        long sum1=0,sum2=0;
        for(int i=0;i<A.length;i++){
            if(A[i]%2==0){
                sum1+=A[i];
                sum2+=(A[i]-1);
            }
            else{
                sum1+=(A[i]-1);
                sum2+=A[i];
            }
            even[i]=sum1;
            odd[i]=sum2;
        }

        res=odd[n];

        Integer h = tree.ceiling(0);
        if(h-1>=0)res=Math.max(res,even[h-1]);
        Integer l = tree.ceiling(A.length-1);
        res=Math.max(res,get(even,l+1,A.length-1));


        PriorityQueue<long[]>pq=new PriorityQueue<>((a,b)->{
            return Long.compare(b[0],a[0]);
        });

        pq.add(new long[]{odd[odd.length-1],A.length});
        for(int i=A.length-1;i>=0;i--){
            Integer hi = tree.ceiling(i);
            long sum = get(even,i,hi-1);
            if(i-1>=0)sum+=odd[i-1];
            pq.add(new long[]{sum,i});
        }

        res=Math.max(res,pq.peek()[0]);

        for(int i=0;i<A.length;i++){
            while(pq.size()>0&&pq.peek()[1]<=i)pq.poll();
            Integer lo = tree.floor(i);
            long left = get(even,lo+1,i);

            Integer hi = tree.ceiling(i);
            long a = get(even,i+1,hi-1);
            res=Math.max(res,left+a);


            if(pq.size()>0){
                long peek[]=pq.peek();
                int index=(int)(peek[1]);
                res=Math.max(res,left+peek[0]-odd[i]);
            }

            /*if(res==49){
                System.out.println(res+"  "+i);
                System.out.println(left+"  "+a);
                System.out.println(left+pq.peek()[0]-odd[i]);
                System.out.println(Arrays.toString(pq.peek()));
                break;
            }*/
        }

        out.println(res);
    }

    public long get(long pre[],int l,int r){
        if(l>r)return 0;
        if(l==0)return pre[r];
        return pre[r]-pre[l-1];
    }


}
