#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 998244353;
int INF = INT_MAX;



int dis[21][200000 + 10][2];
int dis1[200000 + 10][2];
int dis2[200000 + 10][2];
int dis3[200000 + 10][2];
int dis4[200000 + 10][2];
ll Pow[200000 + 10];
ll Pre[200000 + 10];
struct Com{
    bool operator()(vector<int> &a,vector<int> &b) {
        return a[3] > b[3];
    }
};

struct Com1{
    bool operator()(vector<int> &a,vector<int> &b) {
        if(a[2] == b[2]) return a[3] > b[3];
        return a[2] > b[2];
    }
};


void solve() {
  int n, m;
  cin >> n >> m;
  ve<ve<int>> a(n);
  ve<ve<int>> b(n);
  FOR(i, 0, m) {
    int u, v;
    cin >> u >> v;
    u--;v--;
    a[u].pb(v);
    b[v].pb(u);
  }

  FOR(i, 0, 21) {
    FOR(j, 0, n + 1) {
      dis[i][j][0] = dis[i][j][1] = INF;
    }
  }
  
  priority_queue<ve<int>, ve<ve<int>>, Com> pq;
  dis[0][0][0] = 0;
  pq.push({0, 0, 0, 0});
  
  while(pq.size() > 0) {
    ve<int> top = pq.top();pq.pop();
    int flip = top[0], u = top[1], state = top[2];
    if(dis[flip][u][state] != top[3]) {
      continue;
    } 

    if(state == 0) {
      for(int& v : a[u]) {
        if(dis[flip][u][state] + 1 < dis[flip][v][state]) {
          dis[flip][v][state] = dis[flip][u][state] + 1;
          pq.push({flip, v, state, dis[flip][v][state]});
        }
      }

      if(flip + 1 < 21) {
        for(int& v : b[u]) {
          if(dis[flip][u][state] + 1 + (1 << (flip)) < dis[flip + 1][v][1]) {
            dis[flip + 1][v][1] = dis[flip][u][state] + 1 + (1 << (flip));
            pq.push({flip + 1, v, 1, dis[flip + 1][v][1]});
          }
        }
      }

    } else {
      for(int& v : b[u]) {
        if(dis[flip][u][state] + 1 < dis[flip][v][state]) {
          dis[flip][v][state] = dis[flip][u][state] + 1;
          pq.push({flip, v, state, dis[flip][v][state]});
        }
      }
      
      if(flip + 1 < 21) {
        for(int& v : a[u]) {
          if(dis[flip][u][state] + 1 + (1 << (flip)) < dis[flip + 1][v][0]) {
            dis[flip + 1][v][0] = dis[flip][u][state] + 1 + (1 << (flip));
            pq.push({flip + 1, v, 0, dis[flip + 1][v][0]});
          }
        }
      }
    }
  }

  
  int res = INF;
  for(int i = 0; i < 21; i++) {
    res = min(res, dis[i][n - 1][0]);
    res = min(res, dis[i][n - 1][1]);
  }

  if(res != INF) {
    cout << res << endl;
    return;
  }


  FOR(i, 0, 200000 + 5) {
    dis1[i][0] =  dis1[i][1] = INF;
    dis2[i][0] =  dis2[i][1] = INF;
  }
  Pow[0] = 1;
  Pre[0] = 1;
  FOR(i, 1, 200000 + 5) {
    Pow[i] = Pow[i - 1] * 2;
    Pow[i] %= mod;
    Pre[i] = Pre[i - 1] + Pow[i];
    Pre[i] %= mod;
  }




  int cur = INF;
  ll val = INF;
  priority_queue<ve<int>, ve<ve<int>>, Com1> q;
  FOR(i, 0, 200000 + 5) {
    dis1[i][0] =  dis1[i][1] = INF;
    dis2[i][0] =  dis2[i][1] = INF;
  }
  dis1[0][0] = 0;
  dis2[0][0] = 0;
  q.push({0, 0, 0, 0});
  while(q.size() > 0) {
    ve<int> top = q.top(); q.pop();
    int u = top[0], state = top[1];
    if(dis1[u][state] != top[2]) continue;
    if(dis2[u][state] != top[3]) continue;

    if(state == 0) {
      for(int& v : a[u]) {
        if(dis1[u][state] <= dis1[v][state]) {
          if(dis1[u][state] < dis1[v][state]) {
            dis1[v][state] = dis1[u][state];
            dis2[v][state] = dis2[u][state] + 1;
            q.push({v, state, dis1[v][state], dis2[v][state]});
          } else {
            if(dis2[u][state] + 1 < dis2[v][state]) {
              dis2[v][state] = dis2[u][state] + 1;
              q.push({ v, state, dis1[v][state], dis2[v][state]});
            }
          }
        }
      }

      for(int& v : b[u]) {
        if(dis1[u][state] + 1 <= dis1[v][1]) {
          if(dis1[u][state] + 1 < dis1[v][1]) {
            dis1[v][1] = dis1[u][state] + 1;
            dis2[v][1] = dis2[u][state] + 1;
            q.push({v, 1, dis1[v][1], dis2[v][1]});
          } else {
            if(dis2[u][state] + 1 < dis2[v][1]) {
              dis2[v][1] = dis2[u][state] + 1;
              q.push({v, 1, dis1[v][1], dis2[v][1]});
            }
          }
        }
      }

    } else {
      for(int& v : b[u]) {
        if(dis1[u][state] <= dis1[v][state]) {
          if(dis1[u][state] < dis1[v][state]) {
            dis1[v][state] = dis1[u][state];
            dis2[v][state] = dis2[u][state] + 1;
            q.push({v, state, dis1[v][state], dis2[v][state]});
          } else {
            if(dis2[u][state] + 1 < dis2[v][state]) {
              dis2[v][state] = dis2[u][state] + 1;
              q.push({v, state, dis1[v][state], dis2[v][state]});
            }
          }
        }
      }
      for(int& v : a[u]) {
        if(dis1[u][state] + 1 <= dis1[v][0]) {
          if(dis1[u][state] + 1 < dis1[v][0]) {
            dis1[v][0] = dis1[u][state] + 1;
            dis2[v][0] = dis2[u][state] + 1;
            q.push({v, 0, dis1[v][0], dis2[v][0]});
          } else {
            if(dis2[u][state] + 1 < dis2[v][0]) {
              dis2[v][0] = dis2[u][state] + 1;
              q.push({v, 0, dis1[v][0], dis2[v][0]});
            }
          }
        }
      }
    }
  }

  



  if(dis1[n - 1][0] < dis1[n - 1][1]) {
    if(cur > dis1[n - 1][0]) {
      cur = dis1[n - 1][0];
      val = dis2[n - 1][0];
    } 
    else if(cur == dis1[n - 1][0]) {
      val = min(val, (ll)(dis2[n - 1][0]));
    }
  } else if(dis1[n - 1][0] > dis1[n - 1][1]) {
    if(cur > dis1[n - 1][1]) {
      cur = dis1[n - 1][1];
      val = dis2[n - 1][1];
    } 
    else if(cur == dis1[n - 1][1]) {
      val = min(val, (ll)(dis2[n - 1][1]));
    }
  } else {
    if(cur > dis1[n - 1][1]) {
      cur = dis1[n - 1][1];
      val = min(dis2[n - 1][0], dis2[n - 1][1]);
    }
     else if(cur == dis1[n - 1][1]) {
      val = min(val, (ll)(dis2[n - 1][1]));
    }
  }

  

  ll x = 0;
  for(int i = 0; i < cur; i++) {
    x += Pow[i];
    x %= mod;
  }
  x += val;
  x %= mod;
  cout << x << endl;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    solve();
  }
  return 0;
}
