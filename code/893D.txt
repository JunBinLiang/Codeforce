// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int d=Int();
            int A[]=Arr(n);
            Solution sol1=new Solution(out);
            sol1.solution(A,d);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int A[],int d) {
        long sum=0;
        for(int i:A){
            sum+=i;
            if(i==0){
                if(sum<0){//must fill
                    sum=0;
                }
            }
            if(sum>d){
                out.println(-1);
                return;
            }
        }

        sum=0;
        int res=0;
        int last=-1;
        long mx=0;
        for(int i=0;i<A.length;i++){
           sum+=A[i];
           mx=Math.max(mx,sum);
           if(A[i]==0){
               if(sum<0){
                   if(last==-1){
                       last=i;
                       res++;
                   }
                   else{
                        long need=-sum;
                        if(mx+need>d){
                            res++;
                            last=i;
                            mx=0;
                        }
                        else{
                            mx+=need;
                        }
                   }
                   sum=0;
               }
           }
        }


        out.println(res);
    }


}
