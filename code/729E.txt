// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int root=Int()-1;
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=i;
            }

            Solution sol1=new Solution(out);
            sol1.solution(A,root);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int A[][],int root) {
        int res = INF;
        int add = 0;
        int level = 0;
        int extra=0;
        Arrays.sort(A,(a,b)->{
            if(a[1]==root)return -1;
            if(b[1]==root)return 1;
            return a[0]-b[0];
        });



        LinkedList<Integer>deq=new LinkedList<>();
        for(int i=1;i<A.length;i++){
            deq.addLast(A[i][0]);
        }

        while(deq.size()>0&&deq.getFirst()==0){
            add++;
            deq.removeFirst();
        }

        while(add>0){
            add--;
            deq.addLast(INF);
        }

        if(A[0][0]!=0){
            add++;
        }


        /*while(deq.size()>0&&deq.getFirst()<=level){
            level++;
            deq.removeFirst();
        }*/

        //System.out.println("level "+level+" "+add);

        res=Math.min(res,add+deq.size());
        int mx = A[A.length-1][0];
        for(int i=level+1;i<=mx&&deq.size()>0;i++){
            int cnt = 0;
            while(deq.size()>0&&deq.getFirst()<=i){
                cnt++;
                deq.removeFirst();
            }

            //System.out.println(extra);

            if(cnt>0){
                extra+=(cnt-1);
                res=Math.min(res,add+deq.size());
            }
            else{
                if(deq.size()>0){
                    add++;
                    deq.removeLast();
                    res=Math.min(res,add+deq.size());
                }
                else{
                    add++;
                    extra--;
                    res=Math.min(res,add+deq.size());
                }
            }
            //System.out.println(i+" "+deq+" "+extra+" "+add);

        }

        out.println(res);
    }

}
