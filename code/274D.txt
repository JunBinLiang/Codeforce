// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }




    public void solution() {
        int n =fs.Int();
        int m = fs.Int();

        List<Integer>res=new ArrayList<>();
        List<Integer>graph[]=new ArrayList[m + n * m + 10];
        Arrays.setAll(graph,e->new ArrayList<>());

        int in[]=new int[m + n * m + 10];
        int ith = m;

        for(int i = 0; i < n;i++){
            int A[][]=new int[m][2];
            for(int j = 0; j < m; j++){
               A[j][0]=fs.Int();
               A[j][1]=j;
            }
            Arrays.sort(A,(a,b)->{
                return a[0]-b[0];
            });
            for(int j = 0; j < m;j++){
                if(A[j][0]==-1)continue;
                int k = j;
                List<Integer>list=new ArrayList<>();
                while(k<A.length&&A[k][0]==A[j][0]){
                    list.add(A[k][1]);
                    k++;
                }


                for(int v:list){
                    graph[v].add(ith);
                    in[ith]++;
                }

                if(j>0&&A[j-1][0]!=-1){
                    for(int v:list){
                        graph[ith-1].add(v);
                        in[v]++;
                    }
                }
                j = k - 1;
                ith++;
            }
        }


        Queue<Integer>q=new LinkedList<>();
        boolean seen[]=new boolean[in.length];
        for(int i = 0; i < in.length;i++){
            if(in[i]==0){
                seen[i]=true;
                q.add(i);
            }
        }

        while(q.size()>0){
            int top = q.poll();
            if(top<m){
                res.add(top+1);
            }
            for(int next:graph[top]){
                in[next]--;
                if(seen[next]){
                    out.println(-1);
                    return;
                }
                if(in[next]==0){
                    q.add(next);
                    seen[next]=true;
                }
            }
        }

        if(res.size()!=m){
            out.println(-1);
            return;
        }

        for(int i:res){
            out.print(i+" ");
        }
    }

}
