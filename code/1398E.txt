



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }
}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;
    }

    Map<Integer, Integer> f = new HashMap<>();
    public void solution(int all, int testcase) {
        int n = fs.Int();
        int A[][] = new int[n][2];
        List<Integer> list = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            A[i][0] = fs.Int();
            A[i][1] = fs.Int();
            if(A[i][1] > 0) {
                list.add(A[i][1]);
            }
        }

        Collections.sort(list);
        int id = 0;
        for(int i : list) {
            if(!f.containsKey(i)) {
                f.put(i, id);
                id++;
            }
        }

        Seg seg = new Seg(0, id + 10);
        FenWick fen = new FenWick(id + 10 );
        FenWick fen1 = new FenWick(id + 10 );
        int total = 0, cnt = 0;


        for(int i = 0; i < n; i++) {
            int type = A[i][0];
            int d = A[i][1];
            int index = f.get(Math.abs(d));
            if(d > 0) {
                total++;
                if(type == 0) {

                } else {
                    cnt++;
                    fen1.update(index,1);
                }
                seg.update(index, 1);
                fen.update(index, d);
            } else {
                total--;
                if(type == 0) {

                } else {
                    cnt--;
                    fen1.update(index,-1);
                }
                fen.update(index, d);
                seg.update(index, 0);
            }


            int k = total - cnt + 1;
            long sum = fen.sumRange(0, id + 1);
            if(cnt == 0) {
                out.println(sum);
                continue;
            }

            int ith = dfs(seg, k);
            long a = fen.sumRange(ith, id + 1);

            if(cnt == total) {
                a -= fen.sumRange(ith, ith);
            } else {
                if(cnt == fen1.sumRange(ith, id + 1)) {
                    int old = ith;
                    ith = dfs(seg, k - 1);
                    a = fen.sumRange(ith, id + 1) - fen.sumRange(old, old);
                }
            }
            sum += a;
            out.println(sum);
        }


    }

    public int dfs(Seg seg, int k) {
        if(seg.left==null&&seg.right==null){
            return seg.l;
        }
        int lcnt = seg.left.sum;
        if(k <= lcnt) {
            return dfs(seg.left, k);
        }
        else{
            return dfs(seg.right, k - lcnt);
        }
    }


}

class FenWick {
    long tree[];//1-index based
    public FenWick(int n) {
        tree=new long[n+1];
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            i+=(i&-i);
        }
    }

    public long sumRange(int i, int j) {
        return pre(j+1)-pre(i);
    }

    public long pre(int i){
        long sum=0;
        while(i>0){
            sum+=tree[i];
            i-=(i&-i);
        }
        return sum;
    }
}

class Seg{
    int l,r;
    int sum=0;
    Seg left=null,right=null;
    public Seg(int l,int r){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new Seg(l,mid);
            if(r>=mid+1)right=new Seg(mid+1,r);

        }else{

        }
    }

    public int query(int s,int e){
        if(l==s&&r==e){
            return this.sum;
        }

        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }else{
            return left.query(s,mid) + right.query(mid+1,e);
        }
    }

    public void update(int index,int val){
        if(l==r){
            sum=val;
            return;
        }
        int mid=l+(r-l)/2;
        if(index<=mid){
            left.update(index,val);
        }else{
            right.update(index,val);
        }
        this.sum = left.sum + right.sum;
    }
}




