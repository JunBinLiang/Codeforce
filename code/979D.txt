#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<unordered_map>
#include<set>
#include<unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second

//Some predefined templates
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto v : a) { out << (first ? "" : ", "); out << v; first = 0;} 
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream& operator <<(ostream& out, const unordered_map<U, T, Cmp>& a) {
  out << "{"; bool first = true;
  for (auto& p : a) { out << (first ? "" : ", "); out << p.first << ":" << p.second; first = 0;} out << "}";
  return out;
}

ll gcd(ll x, ll y) {
    return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y) {
    return x * y / gcd(x, y);
}


int to_int(string& s) {
  int res = 0;
  for(char c : s) {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;
vector<vector<int>> dir = {{0,1}, {0,-1}, {1,0}, {-1, 0}};

struct Node {
 struct Node* childs[2];
 int mn = 1000000;
};
Node *nodes[100000 + 10];


void add(int val, int k) {
  Node* root = nodes[k];
  for(int i = 18; i >= 0; i--) {
    if(val & (1 << i)) {
      if(root -> childs[1] == NULL) {
        root -> childs[1] = new Node();
      } 
      root = root -> childs[1];
      root -> mn = min(root -> mn, val);
    } else {
      if(root -> childs[0] == NULL) {
        root -> childs[0] = new Node();
      } 
      root = root -> childs[0];
      root -> mn = min(root -> mn, val); 
    }
  }
}

int q(int x, int k, int s) {
  Node* root = nodes[k];
  int val = 0;
  for(int i = 18; i >= 0; i--) {
    if(x & (1 << i)) { // 1
      if(root -> childs[0] != NULL) {
        if(root -> childs[0] -> mn + x <= s) {
          root = root -> childs[0];
        } else {
          if(root -> childs[1] == NULL || root -> childs[1]->mn + x > s) {
            return -1;
          }
          root = root -> childs[1];
          val = val | (1 << i);
        }
      } else {
        if(root -> childs[1] == NULL || root -> childs[1]->mn + x > s) {
          return -1;
        }
        root = root -> childs[1];
        val = val | (1 << i);
      }

    } else {//0
      if(root -> childs[1] != NULL) {
        if(root -> childs[1]->mn + x <= s) {
          val = val | (1 << i);
          root = root -> childs[1];   
        } else {
          if(root -> childs[0] == NULL || root -> childs[0]->mn + x > s) {
            return -1;
          }
          root = root -> childs[0];
        }
      } else {
        if(root -> childs[0] == NULL || root -> childs[0]->mn + x > s) {
          return -1;
        }
        root = root -> childs[0];
      }
    }
  }
  return val;
}

void solve() {
  vector<vector<int>> div(100000 + 10);
  for(int i = 1; i < div.size(); i++) {
    for(int j = i; j < div.size(); j += i) {
      div[j].pb(i);
    }
  }

  for(int i = 0; i < 100000 + 10; i++) {
    nodes[i] = new Node();
  }

  int n; cin >> n;
  for(int i = 0; i < n; i++) {
    int op;
    cin >> op;
    if(op == 1) {
      int u; cin >> u;
      for(int &d : div[u]) {
        add(u, d);
      }
    } else {
      int x, k, s;
      cin >> x >> k >> s;
      if(x % k != 0) {
        cout << -1 << endl;
        continue;
      }
      int ans = q(x, k, s);
      cout << ans << endl;
    }
  }

}


int main()
{
  int t = 1;
  //cin >> t;
  while(t--) {
    solve();
  } 

  return 0;
}


