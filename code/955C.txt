#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)
#define W while
#define um unordered_map
#define us unordered_set
#define str string

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}


ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;
ve<pair<ll, int>> a;

bool issqrt(ll n) {
  ll x = (ll)(sqrt(n));
  return x * x == n;
}

bool COMP(pair<ll, int>& p1, pair<ll, int>& p2) {
  return p1.f < p2.f;
}
void init() {
  const ll LIMIT = 1000000000000000000ll;
  us<ll> seen;
  FOR(i, 2, 1000000 + 1) {
    ll x = (i + 0ll) * i * i;
    while(true) {
      if(seen.find(x) == seen.end()) {
        a.pb({x, 0});
      } 
      seen.insert(x);
      double k = (x + 0.0) * i;
      if(k > LIMIT) break;
      x *= i;
    }
  }
  sort(a.begin(), a.end(), COMP);
  int sum = 0;
  FOR(i, 0, a.size()) {
    if(issqrt(a[i].f)) {
      sum++;
    }
    a[i].se = sum;
  }

}

ll cal(ll n) {
  if(n == 0) {
    return 0;
  }
  ll res = 0;
  int l = 0, r = a.size() - 1;
  int pos1 = -1;
  W(l <= r) {
    int mid = l + (r - l) / 2;
    if(a[mid].f <= n) {
      pos1 = mid;
      l = mid + 1;
    } else {
      r = mid - 1;
    }
  }
  res += (pos1 + 1);

  l = 0; r = 1000000000;
  int pos2 = -1;
  while(l <= r) {
    int mid = l + (r - l) / 2;
    ll sq = (mid + 0ll) * mid;
    if(sq <= n) {
      pos2 = mid;
      l = mid + 1;
    } else {
      r = mid -1;
    }
  }

  res += pos2;
  ll xx = (pos2 + 0ll) * pos2;
  int pos3 = -1;
    
  if(xx >= a[0].f) {
    l = 0; r = a.size() - 1;
    while(l <= r) {
      int mid = l + (r - l) / 2;
      if(xx >= a[mid].f) {
        pos3 = mid;
        l = mid + 1;
      } else {
        r = mid - 1;
      }
    }
  }    
  if(pos3 != -1) {
    ll du = a[pos3].se;
    res -= du;
  }

  return res;
}

void solve() {   
  ll l, r;
  scanf("%lld%lld",&l, &r);
  ll a = cal(r);
  ll b = cal(l - 1);
  printf("%d\n", (a - b));
}


int main()
{
  int t = 1;
  cin >> t;
  init();
  W (t--)
  {
    solve();
  }
  return 0;
}
