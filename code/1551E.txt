// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int k=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A,k);
        }
        out.close();

    }




    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }




    public void solution(int A[],int k) {
        int dif[]=new int[A.length];
        for(int i=0;i<A.length;i++){
            dif[i]=A[i]-(1+i);
        }

        int l =0,r=A.length-1;
        int res=-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            int cnt =get(dif,mid);
            if(cnt>=k){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        out.println(res);
    }

    public int get(int A[],int total){
        int dp[][]=new int[A.length][total+1];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        int res= dfs(dp,A,0,0,total);
        return res;
    }
    public int dfs(int dp[][],int A[],int i,int cnt,int total){
        if(i>=A.length){
            return 0;
        }
        if(dp[i][cnt]!=-1)return dp[i][cnt];
        int res = 0;
        if(cnt<total){
            int a = 0;
            int b=0;

            if(A[i]+cnt==0){
                a++;
            }
            a+=dfs(dp,A,i+1,cnt,total);


            b+=dfs(dp,A,i+1,cnt+1,total);
            res=Math.max(a,b);

        }
        else{
            if(A[i]+cnt==0)res++;
            res+=dfs(dp,A,i+1,cnt,total);
        }
        dp[i][cnt]=res;
        return res;
    }




}
