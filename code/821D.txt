


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;

    }


    public void solution(int all,int testcase) {
        int n = fs.Int();
        int m  =fs.Int();
        int k = fs.Int();
        int A[][] = new int[k + 1][2];
        int dis[] = new int[k + 1];
        Arrays.fill(dis, INF);
        boolean found = false;
        int last = -1;
        for(int i = 0; i < A.length - 1;i++){
            A[i][0] = fs.Int();
            A[i][1] = fs.Int();
            if(A[i][0] == n && A[i][1] == m){
                found = true;
                last = i;
            }
        }

        if(!found){
            last = k;
            A[k][0] = n + 1;
            A[k][1] = m + 1;
        }

        Queue<Integer>q=new LinkedList<>();
        q.add(0);
        dis[0] = 0;
        boolean seen[] = new boolean[A.length];
        seen[0] = true;
        while(q.size() > 0){
            int top = q.poll();
            //System.out.println(Arrays.toString(A[top])+" "+Arrays.toString(dis));
            seen[top] = false;
            int x = A[top][0], y = A[top][1];
            for(int i = 0; i < A.length; i++){
                if(found && i == A.length -1)break;
                int d1 = Math.abs(x-A[i][0]);
                int d2 = Math.abs(y-A[i][1]);
                if(d1+d2==1){
                    if(dis[top] < dis[i] ){
                        dis[i] = dis[top];
                        q.add(i);
                    }
                }
                else if(d1 <=2 || d2 <= 2){
                    if(dis[top] + 1 < dis[i]){
                        dis[i] = dis[top]+1;
                        q.add(i);
                    }
                }
            }
        }

        if(dis[last] == INF){
            out.println(-1);
        }else{
            out.println(dis[last]);
        }
    }





}

