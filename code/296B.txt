// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    int dp[][];
    public void solution() {
        int n =fs.Int();
        String s=fs.Str();
        String t=fs.Str();
        char A[]=s.toCharArray();
        char B[]=t.toCharArray();
        dp=new int[n][4];
        for(int p[]:dp)Arrays.fill(p,-1);
        int res = dfs(A,B,0,0);
        out.println(res);
    }

    public int dfs(char A[],char B[],int i,int state){
        if(i>=A.length){
            if(state==3)return 1;
            else return 0;
        }
        if(dp[i][state]!=-1)return dp[i][state];
        int res = 0;
        if(A[i]=='?'&&B[i]=='?'){
            for(int x = 0; x<10;x++){
                for(int y = 0; y < 10;y++){
                    if(x==y){
                        res+=dfs(A,B,i+1,state);
                    }
                    else if(x<y){
                        res += dfs(A,B,i+1,state|(1<<0));
                    }
                    else{
                        res += dfs(A,B,i+1,state|(1<<1));
                    }
                    res%=mod;
                }
            }
        }
        else if(A[i]=='?'){
            int d = B[i] - '0';
            for(int j = 0;j<10;j++){
                if(j<d){
                    res += dfs(A,B,i+1,state|(1<<0));
                }
                else if(j==d){
                    res+=dfs(A,B,i+1,state);
                }
                else{
                    res+=dfs(A,B,i+1,state|(1<<1));
                }
                res%=mod;
            }
        }
        else if(B[i]=='?'){
            for(int j = 0;j<10;j++){
                int d = A[i] - '0';
                if(j<d){
                    res += dfs(A,B,i+1,state|(1<<1));
                }
                else if(j==d){
                    res+=dfs(A,B,i+1,state);
                }
                else{
                    res+=dfs(A,B,i+1,state|(1<<0));
                }
                res%=mod;
            }
        }
        else{
            int d1 = A[i]-'0';
            int d2=B[i]-'0';
            if(d1==d2)res+=dfs(A,B,i+1,state);
            else if(d1<d2){
                res += dfs(A,B,i+1,state|(1<<0));
            }
            else{
                res += dfs(A,B,i+1,state|(1<<1));
            }
        }
        dp[i][state]=res;
        return res;
    }

}







