// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            Solution sol1=new Solution(out);
            sol1.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int A[]) {
        int n=A.length;
        int dp[]=new int[n];
        int res[]=new int[n];
        Arrays.fill(res,1);
        int len=0;
        boolean seen[]=new boolean[n];
        Seg seg = new Seg(0,1000000+10);
        for(int i=0;i<A.length;i++){
            int mx = seg.query(0,A[i]-1);
            mx++;
            dp[i]=mx;
            seg.update(A[i],mx);
            len=Math.max(mx,len);
        }


        Map<Integer,List<Integer>>f=new HashMap<>();
        for(int i=0;i<dp.length;i++){
            if(!f.containsKey(dp[i]))f.put(dp[i],new ArrayList<>());
            f.get(dp[i]).add(i);
        }



        List<Integer>l=f.get(len);
        if(l.size()==1){
            for(int index:l){
                res[index]=3; seen[index]=true;
            }
        }
        else{
            for(int index:l){
                res[index]=2;
                seen[index]=true;
            }
        }

        //System.out.println(Arrays.toString(dp));

        len--;
        while(len>0){
            List<Integer>cur=f.get(len);
            List<Integer>last=f.get(len+1);
            int right[]=new int[last.size()];
            int mx=0;int cnt=0;
            for(int i=right.length-1;i>=0;i--){
                if(seen[last.get(i)]) mx=Math.max(mx,A[last.get(i)]);
                right[i]=mx;
            }

            for(int i=cur.size()-1;i>=0;i--){
                int index=cur.get(i);
                int ll=0,rr=last.size()-1;
                int pos=-1;
                while(ll<=rr){
                    int mid=ll+(rr-ll)/2;
                    if(last.get(mid)>index){
                        pos=mid;
                        rr=mid-1;
                    }
                    else{
                        ll=mid+1;
                    }
                }

                if(pos!=-1){
                    if(right[pos]>A[index]){
                        seen[index]=true;
                        cnt++;
                    }
                }
            }

            //System.out.println(len+" "+cnt);
            //System.out.println(Arrays.toString(seen));

            //211121111133212111311131



            if(cnt==1){
                for(int index:cur){
                    if(seen[index])res[index]=3;
                    else res[index]=1;
                }
            }
            else{
                for(int index:cur){
                    if(seen[index])res[index]=2;
                    else res[index]=1;
                }
            }

            len--;
        }

        for(int i:res){
            out.print(i);
        }

    }


    class Seg{
        int l,r;
        int max=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                if(left!=null)this.max=Math.max(max,left.max);
                if(right!=null)this.max=Math.max(max,right.max);
            }else{

            }
        }
        public int query(int s,int e){
            if(l==s&&r==e){
                return max;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.max(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                max=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.max=Math.max(left.max,right.max);
        }
    }

}
