// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }

    FenWick fen;
    public void solution(int testcase) {
        int n =fs.Int();
        int q[][]=new int[n][2];
        List<Integer>list = new ArrayList<>();
        for(int i = 0; i < n; i++){
            String s = fs.Str();
            char c = s.charAt(0);
            if(c=='a'){
                q[i][0] = 1;
                q[i][1]=fs.Int();
                list.add(q[i][1]);
            }
            else if(c=='d'){
                q[i][0] = 2;
                q[i][1]=fs.Int();
                list.add(q[i][1]);
            }
            else{
                q[i][0] = 3;
            }
        }
        Collections.sort(list);
        Map<Integer,Integer>f=new HashMap<>();
        int id = 1;
        for(int i : list){
            if(!f.containsKey(i)){
                f.put(i,id++);
            }
        }

        int N = id + 10;
        fen = new FenWick(N);
        Seg seg = new Seg(0, id + 1);

        for(int i = 0; i < q.length;i++){
            int opt = q[i][0],x = q[i][1];
            int index = -1;
            if(x!=0)index = f.get(x);
            if(opt==1){
                fen.update(index,1);
                int cnt = fen.sumRange(0,index);
                int m = cnt % 5;
                seg.tags(index+1,id+1,1);
                seg.update(index,x,m);
            }
            else if(opt==2){
                int cnt = fen.sumRange(0,index);
                int m = cnt % 5;
                fen.update(index,-1);
                seg.tags(index+1,id+1,-1);
                seg.update(index,-x,m);
            }
            else{
                out.println(seg.A[3]);
            }
        }

    }

    public void dfs(Seg seg){
        if(seg == null)return;
        System.out.println(seg.l+" "+seg.r+"  "+seg.setTo);
        System.out.println(Arrays.toString(seg.A));
        System.out.println();

        dfs(seg.left);
        dfs(seg.right);
    }

    class Seg{
        int l,r;
        int mid;
        long sum = 0;
        int setTo=0;
        Seg left=null,right=null;
        long A[];
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            int mid=l+(r-l)/2;
            this.mid = mid;
            A = new long[5];
            if(l!=r){
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }


        public void update(int index,int val, int m){
            if(l==r){
                shift(A,this.setTo);
                this.setTo = 0;
                A[m] += val;
                return;
            }

            if(this.setTo!=0){
                left.tags(l,mid,setTo);
                right.tags(mid+1,r,setTo);
                this.setTo = 0;
            }

            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val, m);
            }else{
                right.update(index,val, m);
            }
            pushup();
        }


        public void tags(int s,int e, int v){
            if(l==s&&r==e){
                this.setTo+=v;
                this.setTo += 5;
                this.setTo %= 5;
                return;
            }

            if(setTo!=0){//push down
                left.tags(l,mid,setTo);
                right.tags(mid+1,r,setTo);
                this.setTo = 0;
            }
            if(e<=mid){
                left.tags(s,e,v);
            }
            else if(s>=mid+1){
                right.tags(s,e,v);
            }else{
                left.tags(s,mid,v);
                right.tags(mid+1,e,v);
            }
            pushup();
        }

        public void pushup(){
            long A1[] = shift1(this.left.A,this.left.setTo);
            long A2[] = shift1(this.right.A,this.right.setTo);
            for(int i = 0; i < 5;i++){
                this.A[i] = A1[i] + A2[i];
            }
        }

        public void pushdown(){
            if(this.left!=null){
                int add = this.setTo;
                this.left.setTo += add + 5;
                this.right.setTo += add + 5;
                this.left.setTo %= 5;
                this.right.setTo %= 5;
            }
            this.setTo = 0;
        }

        public void shift(long A[],int k){
            int n = A.length;
            long B[]=new long[A.length];
            for(int i = 0; i < A.length;i++){
                B[(i + k) % n] = A[i];
            }
            for(int i = 0; i < A.length;i++){
                A[i] = B[i];
            }
        }

        public long[] shift1(long A[],int k){
            int n = A.length;
            long B[]=new long[A.length];
            for(int i = 0; i < A.length;i++){
                B[(i + k) % n] = A[i];
            }
            return B;
        }

    }
}

class FenWick {
    int tree[];//1-index based
    public FenWick(int n) {
        tree=new int[n+1];
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            i+=(i&-i);
        }
    }

    public int sumRange(int i, int j) {
        return pre(j+1)-pre(i);
    }

    public int pre(int i){
        int sum=0;
        while(i>0){
            sum+=tree[i];
            i-=(i&-i);
        }
        return sum;
    }

}



/*
5
add 1
add 5
add 2
add 4
sum
* */

/*
11
add 1
add 7
add 2
add 5
add 6
add 8
add 9
add 3
add 4
sum
add 10
* */

/*
5
add 1
add 4
add 3
add 2
sum
* */
