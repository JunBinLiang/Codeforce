// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution() {
        int n=fs.Int();int k=fs.Int();
        int A[]=new int[n];
        for(int i=0;i<n;i++){
            A[i]=fs.Int();
        }

        Map<Integer,List<Integer>>f=new HashMap<>();
        int B[][]=new int[A.length][2];

        for(int i=0;i<A.length;i++){
            if(!f.containsKey(A[i]))f.put(A[i],new ArrayList<>());
            List<Integer>list=f.get(A[i]);
            if(list.size()<k){
                B[i][0]=-1;
            }
            else{
                B[i][0]=list.get(list.size()-k);
            }
            B[i][1]=i;
            list.add(i);
        }





        Arrays.sort(B,(a,b)->{
            return a[0]-b[0];
        });

        for(int i=0;i<B.length;i++){
            int index=B[i][1];
        }

        PersistentSeg segs[]=new PersistentSeg[n+1];
        segs[0]=new PersistentSeg(0,n-1,true);
        for(int i=0;i<A.length;i++){
            segs[i+1]=new PersistentSeg(0,n-1);
            PersistentSeg.update(segs[i],segs[i+1],B[i][1],B[i][0]);
        }


        int m=fs.Int();
        int q[][]=new int[m][2];
        for(int i=0;i<m;i++){
            q[i][0]=fs.Int();
            q[i][1]=fs.Int();
        }
        int last=0;





        for(int p[]:q){
            int l = (p[0]+last) % n;
            int r = (p[1]+last) % n;
            if(l>r){//swap
                int t=l;
                l=r;
                r=t;
            }

            int ll=0;
            int rr=n-1;

            int pos=-1;
            while(ll<=rr){
                int mid = ll+(rr-ll)/2;
                if(B[mid][0]<l){
                    pos=mid;
                    ll=mid+1;
                }
                else{
                    rr=mid-1;
                }
            }
            PersistentSeg seg=segs[pos+1];
            last=seg.query(l,r);
            out.println(last);
        }
    }
}


class PersistentSeg{
    int l,r;
    int cnt = 0;
    PersistentSeg left=null,right=null;

    public PersistentSeg(int l,int r,boolean init){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new PersistentSeg(l,mid,true);
            if(r>=mid+1)right=new PersistentSeg(mid+1,r,true);
        }else{

        }
    }
    public PersistentSeg(int l,int r){
        this.l=l;
        this.r=r;
    }


    public int query(int s,int e){
        //System.out.println(s+" "+e);
        if(e<0||s<0)return 0;
        if(l==s&&r==e){
            return this.cnt;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }
        else{
            return left.query(s,mid)+right.query(mid+1,e);
        }
    }


    public static void update(PersistentSeg pre, PersistentSeg cur, int index,int val) {
        if (cur.l == cur.r) {
            cur.cnt=1;
            return;
        }
        int mid = cur.l + (cur.r - cur.l) / 2;
        if (index <= mid) {//update left
            cur.right = pre.right;
            cur.left = new PersistentSeg(pre.left.l, pre.left.r);
            update(pre.left, cur.left, index,val);
        } else {//update right
            cur.left = pre.left;
            cur.right = new PersistentSeg(pre.right.l, pre.right.r);
            update(pre.right, cur.right, index,val);
        }
        cur.cnt=cur.left.cnt+cur.right.cnt;
    }


}



