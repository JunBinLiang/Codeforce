// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;

    }

    long dp[][] = new long[52][1001];
    long ans[][] = new long[52][1001];
    long inv[] = new long[1001];
    public void solution(int testcase) {
        int t = fs.Int();
        long f[] = new long[3000];
        f[0] = f[1]=1;
        for(int i = 2; i < f.length; i++){
            f[i] = f[i - 1] * i;
            f[i] %= mod;
        }

        for(long p[]:dp)Arrays.fill(p, -1);
        for(int i = 1; i <= 50;i++){
            for(int j = 1000; j >= 0; j--){
                dfs(j, i);
            }
        }

        /*for(int k = 0; k < 10; k++){
            for(int i = 0; i < 15; i++){
                System.out.print(dp[k][i]+" ");
            }System.out.println();
        }*/

        for(int i = 0; i < dp.length; i++){
            for(int j = 0; j < dp[0].length; j++){
                if(dp[i][j]==-1)dp[i][j]=0;
            }
        }

        inv[0]=inv[1]=1;
        for (int i=2;i<inv.length;i++){
            inv[i]=modInverse(i,mod)*inv[i-1];
            inv[i]%=mod;
        }

        //System.out.println(C(3,0,f));

        for(int k = 1; k < 50; k++){
            for(int i = 1; i < ans[0].length; i++){
                for(int j = (1 + k) * k / 2; j <= i; j++){
                    int ball = i- j;
                    ans[k][i] += (dp[k][j] * C(ball + k + 1 - 1 , ball,f)) % mod;
                    ans[k][i] += mod;
                    ans[k][i] %= mod;
                }
            }
        }



        while(t>0){
            t--;
            int n = fs.Int();
            int k = fs.Int();
            if(k>49){
                out.println(0);
            }else{
                long res = ans[k][n] * f[k];
                res %= mod;
                out.println(res);
            }
        }

    }

    public long dfs(int n, int k){
        if(n == 0 && k ==0){
            return 1;
        }
        if(k == 0 || n < 0){
            return 0;
        }
        if(dp[k][n]!=-1)return dp[k][n];
        long res = 0;
        long a = dfs(n - k, k - 1);
        long b = dfs(n -k, k);
        res += (a + b);
        res %= mod;
        return dp[k][n] = res;

    }

    private long C(int n, int r, long fact[]) {
        if(n<0||r<0)return 1;
        return (((fact[n] * inv[r]) % mod) * inv[n - r]) % mod;
    }



    long modInverse(long a, long m) {
        long m0 = m;
        long y = 0, x = 1;

        if (m == 1)
            return 0;

        while (a > 1) {
            long q = a / m;
            long t = m;
            m = a % m;
            a = t;
            t = y;
            y = x - q * y;
            x = t;
        }
        if (x < 0)
            x += m0;

        return x;
    }


}

