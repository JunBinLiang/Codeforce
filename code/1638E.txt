



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;

    }

    TreeMap<Integer,int[]>tree = new TreeMap<>();
    List<Long>cols[];
    FenWick fen;
    public void solution(int all, int testcase) {
        int n = fs.Int();
        int m = fs.Int();
        tree.put(0, new int[]{n - 1, 1, 0});

        cols = new ArrayList[n + 1];
        Arrays.setAll(cols, e -> new ArrayList<>());
        fen = new FenWick(n + 2);

        for(int i = 0; i < m; i++) {
            String s = fs.Str();
            if(s.equals("Color")) {
                int l = fs.Int() - 1;
                int r = fs.Int() - 1;
                int color = fs.Int();
                add(l,r,color);
            }
            else if(s.equals("Add")) {
                int color = fs.Int();
                int val = fs.Int();
                List<Long>preList = cols[color];
                if(preList.size() == 0) {
                    preList.add((val + 0l));
                } else {
                    long last = preList.get(preList.size() - 1);
                    preList.add(last + val);
                }

            } else {
                int index = fs.Int() - 1;
                long sum1 = fen.sumRange(0, index);
                Integer floor =  tree.floorKey(index);
                int pair[] = tree.get(floor);
                List<Long>preList = cols[pair[1]];
                long sum2 = get(preList, pair[2], preList.size() - 1);
                out.println(sum1 + sum2);
            }
        }
    }

    public void add(int l,int r, int color) {
        while(true){
            Integer ceil = tree.ceilingKey(l);
            if(ceil == null) break;
            int pair[] = tree.get(ceil);
            if(pair[0] > r) break;
            //[ceil : pair[0]]
            int ll = ceil;
            int rr = pair[0];
            List<Long>preList = cols[pair[1]];
            long w = get(preList, pair[2], preList.size() - 1);
            fen.update(ll, w);
            fen.update(rr + 1, -w);
            tree.remove(ceil);
        }

        Integer low = tree.lowerKey(l);
        if(low != null) {
            int pair[] = tree.get(low);
            if(pair[0] > r) {
                List<Long>preList = cols[pair[1]];
                long w = get(preList, pair[2], preList.size() - 1);
                fen.update(l, w);
                fen.update(r + 1, -w);
                tree.remove(low);
                tree.put(low, new int[]{l - 1, pair[1], pair[2]});
                tree.put(r + 1, new int[]{pair[0],pair[1],pair[2]});
            }
            else if(pair[0] >= l) {
                //remove [l : pair[0]]
                List<Long>preList = cols[pair[1]];
                long w = get(preList, pair[2], preList.size() - 1);
                fen.update(l, w);
                fen.update(pair[0] + 1, -w);
                pair[0] = l - 1;
            }
        }

        Integer ceil = tree.ceilingKey(l);
        if(ceil != null && ceil <= r) {
            int pair[] = tree.get(ceil);
            tree.remove(ceil);
            //[ceil : r]
            List<Long>preList = cols[pair[1]];
            long w = get(preList, pair[2], preList.size() - 1);
            fen.update(ceil, w);
            fen.update(r + 1, -w);
            if(pair[0] >= r + 1) {
                tree.put(r + 1, pair);
            }
        }
        tree.put(l, new int[]{r, color, cols[color].size()});
    }

    public void print(){
        for(Integer l : tree.keySet()){
            int pair[] = tree.get(l);
            System.out.println(l + "  "+ pair[0] + "      "+pair[1]+" "+pair[2]);
        }
        System.out.println(".............");
    }

    public long get(List<Long>list, int l, int r) {
        if(l > r)return 0;
        if(l == 0)return list.get(r);
        return list.get(r) - list.get(l - 1);
    }

}

class FenWick {
    long tree[];//1-index based
    public FenWick(int n) {
        tree=new long[n+1];
    }

    public void update(int i, long val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            i+=(i&-i);
        }
    }

    public long sumRange(int i, int j) {
        return pre(j+1)-pre(i);
    }

    public long pre(int i){
        long sum=0;
        while(i>0){
            sum+=tree[i];
            i-=(i&-i);
        }
        return sum;
    }
}
