#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)
#define W while
#define um unordered_map
#define us unordered_set
#define str string

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}


ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;



void solve() {
  int n, m;
  cin >> n >> m; 
  ve<set<int>> a(n);
  int res = 0;
  FOR(i, 1, n + 1) {
    int x;
    scanf("%i", &x);
    x--;
    if(a[x].find(i - 1) == a[x].end()) {
      res++;
    }
    a[x].insert(i);
  }


  //minimum merge time : number of consecutive chunk - 1
  cout << res - 1 << endl;
  FOR(i, 0, m - 1) {
    int u, v;
    cin >> u >> v;
    u--;v--;
    if(a[u].size() < a[v].size()) {
      swap(a[u], a[v]);
    }

    //merge v to u
    int last = -2;
    for(auto j : a[v]) {
      if(j - 1 == last) {

      } else {
        if(a[u].find(j - 1) != a[u].end()) {
          res--;
        }
      }

      if(a[u].find(j + 1) != a[u].end()) {
        res--;
      }

      a[u].insert(j);
      last = j;
    }
    
    /*for(auto j : a[u]) {
      cout << j << " ";
    }cout << endl;*/

    cout << res - 1 << endl;
  }

}

int main()
{
  int t = 1;
  //cin >> t;
  W (t--)
  {
    solve();
  }
  return 0;
}





