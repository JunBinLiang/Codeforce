// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int S=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<A.length;i++){
                A[i][0]=Int();
                A[i][1]=Int();
            }

            Solution sol=new Solution(out);
            sol.solution(A,S);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000009;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    long dp[];
    long c[];
    long t[];
    int S;
    int n;
    public void solution(int A[][],int S) {
        this.S=S;
        n = A.length;
        t=new long[n+1];
        c=new long[n+1];
        for(int i=1;i<=A.length;i++){
            t[i]=t[i-1]+A[i-1][0];
            c[i]=c[i-1]+A[i-1][1];
        }

        dp=new long[n+1];
        int q[]=new int[A.length+100];
        int head=0,tail=1;

        for(int i=1;i<=A.length;i++){
            /*for(int j = i-1;j>=0;j--){
                mn=Math.min(mn,dp[j]+(c[i]-c[j])*t[i]+(c[n]-c[j])*S);
            }
            dp[i]=mn;*/

            /*while(head+1<tail&&up(q[head+1],q[head])<=(t[i]+S)*down(q[head+1],q[head])){
                head++;
            }
            dp[i]=getdp(q[head],i);*/

            long bound=t[i]+S;
            int l = 1,r=tail-1;
            int pos =0;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(up(q[mid],q[mid-1])<=(bound)*down(q[mid],q[mid-1])){
                    pos=mid;
                    l=mid+1;
                }
                else{
                    r=mid-1;
                }
            }
            dp[i]=getdp(q[pos],i);

            while(head+1<tail&&up(i,q[tail-1])*down(q[tail-1],q[tail-2])<=up(q[tail-1],q[tail-2])*down(i,q[tail-1])){
                tail--;
            }
            q[tail++]=i;

        }
        out.println(dp[n]);
    }


    public long getdp(int j,int i){
        return (c[i]-c[j])*t[i]+(c[n]-c[j])*S+dp[j];
    }

    public double up(int j,int k){
        return dp[j]-dp[k];
    }

    public double down(int j,int k){
        return c[j]-c[k];
    }

}
















