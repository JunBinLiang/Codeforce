// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");



        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }


    public void solution() {
        int n=fs.Int();
        int m=fs.Int();
        int k=fs.Int();
        char A[][]=new char[n][m];
        for(int i=0;i<n;i++){
            String s =fs.Str();
            A[i]=s.toCharArray();
        }

        int dir[][]=new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        int sr=fs.Int()-1,sc= fs.Int()-1;
        int tr=fs.Int()-1,tc=fs.Int()-1;



        int dis[][]=new int[n][m];
        for(int p[]:dis){
            Arrays.fill(p,INF);
        }



        Queue<int[]>q=new LinkedList<>();
        q.add(new int[]{sr,sc,0});
        dis[0][0]=0;
        int res=Integer.MAX_VALUE;
        while(q.size()>0){
            int top[]=q.poll();
            int r=top[0],c=top[1],level=top[2];

            if(r==tr&&c==tc){
                res=Math.min(res,level);
                continue;
            }

            for(int p[]:dir){
                for(int i=1;i<=k;i++){
                    int x = r+p[0]*i;
                    int y=c+p[1]*i;
                    if(x<0||y<0||x>=n||y>=m||A[x][y]=='#'||level+1 > dis[x][y])break;
                    if(level+1<dis[x][y]){
                        dis[x][y]=level+1;
                        q.add(new int[]{x,y,level+1});
                    }
                }
            }
        }

        if(res==Integer.MAX_VALUE)out.println(-1);
        else out.println(res);

    }


}








