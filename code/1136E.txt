// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");

        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    long C[];
    public void solution(int t) {
        int n =fs.Int();
        int A[]=new int[n];
        int B[]=new int[n-1];
        C=new long[n];
        long p[]=new long[B.length+1];
        long pp[]=new long[B.length+1];
        for(int i =0;i<A.length;i++){
            A[i]=fs.Int();
        }

        for(int i =0;i<B.length;i++){
            p[i+1]+=fs.Int();
            p[i+1]+=p[i];

            pp[i+1]+=p[i+1];
            pp[i+1]+=pp[i];
        }


        for(int i=0;i<C.length;i++){
            C[i]=(A[i]+0l)-p[i];
        }


        Seg seg = new Seg(0,C.length-1);

        int m = fs.Int();
        for(int i = 0; i < m; i++){
            String s = fs.Str();
            if(s.equals("+")){//add
                int index=fs.Int()-1;
                int x = fs.Int();
                long val = seg.query(index,index)+x;
                int l = index+1,r=C.length-1;
                int pos = index;
                while(l<=r){
                    int mid = l + (r-l)/2;
                    long v1 = seg.query(mid,mid);
                    if(v1<val){
                        pos=mid;
                        l=mid+1;
                    }else{
                        r = mid - 1;
                    }
                }
                seg.update(index,pos,val);
            }else{//sum
                int l = fs.Int()-1;
                int r = fs.Int()-1;
                long v1 = seg.query(l,r);
                long v2=get(pp,l,r);
                out.println(v1+v2);
            }

        }

    }

    public void dfs(Seg root){
        if(root==null)return;
        System.out.println(root.l+" "+root.r+"   "+root.setTo);
        dfs(root.left);
        dfs(root.right);
    }

    public long get(long A[],int l,int r){
        if(l==0)return A[r];
        return A[r]-A[l-1];
    }

    class Seg{
        int l,r;
        long sum=0;
        long setTo=Long.MIN_VALUE;
        Seg left=null,right=null;

        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.sum=left.sum()+right.sum();
            }else{
                this.setTo=C[l];
            }
        }


        public long query(int s,int e){//sum
            if(l==s&&r==e){
                return this.sum();
            }

            int mid=l+(r-l)/2; //left :  to mid-1,
            if(setTo!=Long.MIN_VALUE){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.sum= left.sum()+right.sum();
                this.setTo=Long.MIN_VALUE;
            }


            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return left.query(s,mid)+right.query(mid+1,e);
            }
        }


        public void update(int s,int e,long val){
            if(l==s&&r==e){//whole subtree : setTo
                this.setTo=val;
                return;
            }

            int mid=l+(r-l)/2;
            if(setTo!=Long.MIN_VALUE){
                left.update(l,mid,setTo);
                right.update(mid+1,r,setTo);
                this.setTo=Long.MIN_VALUE;
            }
            if(e<=mid){
                left.update(s,e,val);
            }
            else if(s>=mid+1){
                right.update(s,e,val);
            }else{
                left.update(s,mid,val);
                right.update(mid+1,e,val);
            }
            this.sum=left.sum()+right.sum();

        }
        public long sum() {
            if (setTo!=Long.MIN_VALUE) return (setTo)*(r-l+1);
            return this.sum;
        }
    }

}

