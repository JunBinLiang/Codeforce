#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define s second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;


//C(n, 3)
// (n) * ï¼ˆn - 1) * (n - 2) / 6

void solve(int n, int m) {
  vector<int> res;
  int r = 1000000000;
  if(m == 0) {
    while(res.size() < n) {
      res.pb(r); r -= 10000;
    }
    sort(res.begin(), res.end());
    for(int i : res) {
      cout << i << " ";
    } cout << endl;
    return;
  }


  int sum = 0;
  for(int i = 1; i <= n && sum < m; i++) {
    res.pb(i);
    sum += (i - 1) / 2;
  }

  if(sum < m) {
    cout << -1 << endl;
    return;
  }

  int last = res[res.size() - 1];
  res.pop_back();
  sum -= ((last - 1) / 2);
  int need = m - sum;

  
  for(int i = 0; i < res.size(); i++) {
    int dif = (res[res.size() - 1] - res[i] ) / 2 + 1;
    if(dif == need) {
      res.pb(res[i] + res[res.size() - 1]);
      break;
    }
  }


  while(res.size() < n) {
    res.pb(r); r -= 10000;
  }

  sort(res.begin(), res.end());
  for(int i : res) {
    cout << i << " ";
  } cout << endl;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    int n, m;
    cin >> n >> m;
    solve(n, m);
  }

  return 0;
}
