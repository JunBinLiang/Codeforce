// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;

    int match[];
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;

    }

    public void solution(int testcase) {
        int n = fs.Int();
        long s = fs.Long();
        long A[] = new long[n];
        for(int i = 0; i < n;i++){
            A[i]=fs.Long();
        }

        long res = 0;
        for(int i = 0; i <(1<<n);i++){
            int sign = 1;
            long sum = 0;
            for(int j = 0; j < n;j++){
                if((i&(1<<j))!=0){
                    sum += (A[j] + 1);
                    sign = -sign;
                }
            }

            if(sum <= s){
                long x = sign * Lucas(s - sum + n - 1,n - 1, mod);
                res += x;
                res +=mod;
                res %=mod;
            }

        }

        res += mod;
        res%=mod;
        out.println(res);
    }



    public long pow(long a,long b,long mod){
        long res=1;
        long pow=a;
        for(int i=0;i<32;i++){
            if((b&(1<<i))!=0){
                res*=pow;
                res%=mod;
            }
            pow*=pow;
            pow%=mod;
        }
        return res;
    }


    public long Comb(long a, long b, long mod) {
        if(a < b)   return 0;
        if(a == b)  return 1;
        if(b > a - b)   b = a - b;

        long ans = 1, ca = 1, cb = 1;
        for(long i = 0; i < b; ++i) {
            ca = (ca * (a - i))%mod;
            cb = (cb * (b - i))%mod;
        }
        ans = (ca * pow(cb, mod - 2, mod)) % mod;
        return ans;
    }

    public long Lucas(long n, long m,long mod) {
        long ans = 1;
        while((n > 0 && m > 0 && ans > 0)) {
            ans = (ans*Comb(n % mod, m%mod, mod)) % mod;
            n /= mod;
            m /= mod;
        }
        return ans;
    }



}

