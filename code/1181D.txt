



import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }



    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt")
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }
}



class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    //int mod = 998244353;
    Main.FastScanner fs;


    public Solution(PrintWriter out, Main.FastScanner fs) {
        this.out = out;
        this.fs = fs;
    }




    public void solution(int all, int testcase) {
        int n  = fs.Int();
        int m = fs.Int();
        int q = fs.Int();
        int A[] = new int[n];
        int cnt[] = new int[m];
        for(int i = 0; i < n; i++) {
            A[i] = fs.Int() - 1;
            cnt[A[i]]++;
        }

        int B[][] = new int[m][2];
        for(int i = 0; i < m; i++) {
            B[i][0] = cnt[i];
            B[i][1] = i;//[cnt, number]
        }
        Arrays.sort(B, (a, b) -> {
            if(a[0] == b[0])return a[1] - b[1];
            return a[0] - b[0];
        });



        List<long[]> list = new ArrayList<>();
        long sum = 0;
        for(int i = 1; i < B.length; i++) {
            if(B[i][0] != B[i - 1][0]) {
                long dif = B[i][0] - B[i - 1][0];
                sum += (dif * (i));
                list.add(new long[]{sum, i});
            }
        }
        list.add(new long[]{1000000000000000000l, m});


        long qq[][] = new long[q][2];
        for(int i = 0; i < q; i++) {
            long k = fs.Long() - n;
            qq[i][0] = k;
            qq[i][1] = i;
        }
        Arrays.sort(qq, (a,b)->{
            return Long.compare(a[0],b[0]);
        });

        Seg seg = new Seg(0, m - 1);
        for(int i = 0; i < B.length; i++) {
            seg.update(B[i][1],1);
            if(i + 1  < B.length && B[i][0] != B[i + 1][0])break;

        }

        int res[] = new int[q];
        int j = 0;

        for(int i = 0; i < qq.length; i++) {
            long k = qq[i][0];
            int index = (int)(qq[i][1]);
            while(j < list.size() && k > list.get(j)[0]) {
                int a = (int)(list.get(j)[1]);
                int b = m;
                if(j + 1 < list.size()) {
                    b = (int)(list.get(j + 1)[1]);
                }
                for(int x = a; x < b; x++) {
                    seg.update(B[x][1],1);
                }
                j++;
            }
            long x = k;
            if(j > 0) {
                x = (long)(k) - list.get(j - 1)[0];
            }

            int cnt1 = (int)(list.get(j)[1]);
            int ith = (int)(x % cnt1);
            if(ith == 0) ith += cnt1;

            int ans = dfs(seg, ith);
            res[index] = (ans + 1);
        }

        StringBuilder str = new StringBuilder();
        for(int i : res)str.append(i).append("\n");
        out.println(str.toString());
    }

    public int dfs(Seg seg, int k) {
        if(seg.left==null&&seg.right==null){
            return seg.l;
        }
        int lcnt = seg.left.sum;
        if(k <= lcnt) {
            return dfs(seg.left, k);
        }
        else{
            return dfs(seg.right, k - lcnt);
        }
    }


}


class Seg{
    int l,r;
    int sum=0;
    Seg left=null,right=null;
    public Seg(int l,int r){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new Seg(l,mid);
            if(r>=mid+1)right=new Seg(mid+1,r);

        }else{

        }
    }

    public int query(int s,int e){
        if(l==s&&r==e){
            return this.sum;
        }

        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }else{
            return left.query(s,mid) + right.query(mid+1,e);
        }
    }

    public void update(int index,int val){
        if(l==r){
            sum=val;
            return;
        }
        int mid=l+(r-l)/2;
        if(index<=mid){
            left.update(index,val);
        }else{
            right.update(index,val);
        }
        this.sum = left.sum + right.sum;
    }
}
