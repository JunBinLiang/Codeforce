// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("src/text.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");
        //File file = new File("src/text.txt");
        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution();
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = 10000000;
    int MOD = 998244353 ;
    long mod = 1000000007;
    Main.FastScanner fs;
    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;
    }



    public void solution() {

        int n =fs.Int();
        int d=fs.Int();
        int pa[]=new int[n];
        long A[]=new long[n];
        long B[]=new long[n];
        for(int i = 0;i<n;i++){
            A[i]=fs.Long();
            B[i] = A[i];
        }

        Arrays.sort(B);
        Map<Long,Integer>f=new HashMap<>();
        Map<Integer,Integer>g=new HashMap<>();
        int id = 1;
        for(long i : B){
            if(!f.containsKey(i)){
                f.put(i,id++);
            }
        }

        Seg seg = new Seg(0,id+5);
        int res = 0;
        TreeSet<Long>tree =  new TreeSet<>();
        int j = 0;

        

        for(int i = 0; i < A.length;i++){
            long cur = A[i];
            Long ceil = tree.ceiling(cur+d);
            Long floor = tree.floor(cur-d);
            int mx = 0;
            int pre = -1;
            if(ceil!=null){
                int index = f.get(ceil);
                int pair[] = seg.query(index,id+1);
                if(pair[0]>mx){
                    mx=pair[0];
                    pre=pair[1];
                }
            }
            if(floor!=null){
                int index = f.get(floor);
                int pair[] = seg.query(0,index);
                if(pair[0]>mx){
                    mx=pair[0];
                    pre=pair[1];
                }
            }
            if(mx+1>res){
                res=mx+1;
                j = i;
            }
            int index=f.get(cur);
            if(pre!=-1&&mx!=0){
                pa[i]=g.get(pre);
            }

            seg.update(index,mx+1);
            tree.add(cur);
            g.put(index,i);
        }


        out.println(res);
        List<Integer>list=new ArrayList<>();
        while(res>0){
            res--;
            list.add(j+1);
            j=pa[j];
        }
        for(int x = list.size()-1;x>=0;x--){
            out.print(list.get(x)+" ");
        }

    }

    class Seg{
        int l,r;
        int max=0;
        Seg left=null,right=null;
        int index;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                if(left!=null)this.max=Math.max(max,left.max);
                if(right!=null)this.max=Math.max(max,right.max);
            }else{
                index = l;
            }
        }
        public int[] query(int s,int e){
            if(l==s&&r==e){
                return new int[]{max,index};
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                int a[]=left.query(s,mid);
                int b[]=right.query(mid+1,e);
                if(a[0]>b[0]){
                    return a;
                }
                else{
                    return b;
                }
            }
        }

        public void update(int index,int val){
            if(l==r){
                max=Math.max(max,val);
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            if(left.max>right.max){
                this.index=left.index;
            }
            else{
                this.index=right.index;
            }
            this.max=Math.max(left.max,right.max);
        }
    }


}


