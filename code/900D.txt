// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int x=Int();int y=Int();
            Solution sol=new Solution(out);
            sol.solution(x,y);
        }
        out.close();

    }




    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    Map<Integer,Long>f=new HashMap<>();
    public void solution(int x,int y) {
        if(y%x!=0){
            out.println(0);
            return;
        }
        int sum=y/x;

        long res = dfs(sum);
        out.println(res);
    }


    public long dfs(int n){
        if(n==1)return 1;
        if(f.containsKey(n)){
            return f.get(n);
        }
        long res = quick(2,n-1);
        for(int i=2;i*i<=n;i++){
            if(n%i==0){
                int a= i;//gcd == a
                int b= n/i;//gcd == b
                res-=dfs(b);
                res+=mod;
                res%=mod;
                if(a!=b){
                    res-=dfs(a);
                    res+=mod;
                    res%=mod;
                }
            }
        }
        res-=1;
        res+=mod;
        res%=mod;

        f.put(n,res);
        return res;
    }

    public long quick(int a,int b){
        long res=1;
        long pow=a;
        for(int i=0;i<32;i++){
            if((b&(1<<i))!=0){
                res*=pow;
                res%=mod;
            }
            pow*=pow;
            pow%=mod;
        }
        return res;
    }


}


