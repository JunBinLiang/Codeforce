


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner in=new Scanner(System.in);
        //Scanner in=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            Solution sol1=new Solution(out,fs);
            sol1.solution(T,t);
        }
        out.flush();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int NINF = Integer.MIN_VALUE;
    int MOD = 998244353;
    int mod = 1000000007;
    Main.FastScanner fs;


    public Solution(PrintWriter out,Main.FastScanner fs) {
        this.out = out;
        this.fs=fs;

    }


    public void solution(int all,int testcase) {
        int n = fs.Int();
        int p = fs.Int();
        int k = fs.Int();
        int A[][] = new int[n][p + 1];
        for(int i = 0; i < n; i++){
            A[i][0] = fs.Int();
        }

        for(int i = 0; i < n; i++){
            for(int j = 1; j <= p; j++){
                A[i][j] = fs.Int();
            }
        }

        Arrays.sort(A,(a,b)->{
            return b[0] - a[0];
        });


        long dp[][] = new long[n][(1<<p)];
        for(long pp[]:dp)Arrays.fill(pp,-1);

        long sum = 0;
        for(int i = 0; i < k;i++){
            sum += A[i][0];
        }
        dp[0][(1<<p) - 1] = 0;
        for(int i = 0; i < p; i++){
            int state = ((1<<p) - 1) ^ (1 <<i);
            dp[0][state] = A[0][i + 1] - A[0][0] + A[k][0];
        }

        for(int i = 1; i < n; i++){
            for(int state = 0; state < (1<<p); state++){
                if(i - 1 >= 0){
                    dp[i][state] = dp[i - 1][state];
                }

                int cnt = Integer.bitCount(state);
                int off = p - cnt;

                for(int j = 0; j < p;j++){
                    if((state & (1<<j)) == 0){
                        int pstate = state | (1<<j);
                        if(dp[i - 1][pstate]!=-1){
                            int sub = 0;
                            if(i < k + off - 1){
                                sub = -A[i][0] + A[k + off - 1][0];
                            }
                            dp[i][state] = Math.max(dp[i][state], dp[i-1][pstate] + A[i][j + 1] + sub);
                        }
                    }
                }
            }
        }

        long res = 0;
        for(int i = 0; i < n; i++){
            res = Math.max(res, sum + dp[i][0]);
        }
        out.println(res);
    }





}

