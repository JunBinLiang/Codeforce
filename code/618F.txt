#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)
#define W while
#define um unordered_map
#define us unordered_set
#define str string

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}


ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}


int MOD = 998244353;
int mod = 1000000007;
int INF = INT_MAX;

ll p1[1000000 + 50];
ll p2[1000000 + 50];
ll p3[1000000 + 50];
void solve(ve<int>& a, ve<int>& b, bool swi) {
  ll sum1 = 0, sum2 = 0;
  for(int i : a) sum1 += i;
  for(int i : b) sum2 += i;
  if(sum1 == sum2) {
    cout << a.size() << endl;
    FOR(i, 1, a.size() + 1) {
       printf("%d ",i);
    } cout << endl;
    FOR(i, 1, a.size() + 1) {
       printf("%d ",i);
    } cout << endl;
    return;
  }
  if(sum1 > sum2) {
    solve(b, a, true);
    return;
  }

  p1[0] = p2[0] = 0;
  FOR(i, 1, a.size() + 1) {
    p1[i] = p1[i - 1] + a[i - 1];
  }

  FOR(i, 1, b.size() + 1) {
    p2[i] = p2[i - 1] + b[i - 1];
  }


  int j = 0;
  ve<int> mapping(a.size() + 5);
  FOR(i, 0, a.size() + 1) {
    while(j < b.size() + 1 && p2[j] < p1[i]) {
      j++;
    }
    p3[i] = p2[j] - p1[i];
    mapping[i] = j;
  }

  um<ll, int> f;
  FOR(i, 0, a.size() + 1) {
    if(f.find(p3[i]) != f.end()) {
      int l = f[p3[i]];
      int r = i;
      int ll = mapping[l];
      int rr = mapping[r];
      if(!swi) {
        cout << (r - l) << endl;
        FOR(i, l + 1, r + 1) {
           printf("%d ",i);
        } cout << endl;

        cout << rr - ll << endl;
        FOR(i, ll + 1, rr + 1) {
           printf("%d ",i);
        } cout << endl;
      } else {
        cout << rr - ll << endl;
        FOR(i, ll + 1, rr + 1) {
          printf("%d ",i);
        } cout << endl;

        cout << (r - l) << endl;
        FOR(i, l + 1, r + 1) {
           printf("%d ",i);
        } cout << endl;
      }

      
      return;
    }
    f[p3[i]] = i;
  }

}


int main()
{
  int t = 1;
  //cin >> t;
  W (t--)
  {
    int n;
    cin >> n;
    ve<int> a(n);
    ve<int> b(n);
    FOR(i, 0, n) {
      scanf("%i", &a[i]);
    }
    FOR(i, 0, n) {
      scanf("%i", &b[i]);
    }
    solve(a, b, false);
  }
  return 0;
}





