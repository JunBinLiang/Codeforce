// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            int edges[][]=new int[m][3];
            for(int i=0;i<edges.length;i++){
                for(int j=0;j<edges[0].length;j++){
                    edges[i][j]=Int();
                }
            }
            Solution sol1=new Solution(out);
            sol1.solution(n,edges);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    long mod = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int n,int edges[][]) {
        Arrays.sort(edges,(a,b)->{
            return a[2]-b[2];
        });
        int res = 0;
        int maxs[]=new int[n+10];
        for(int i=0;i<edges.length;i++){
            int j = i;
            List<int[]>list=new ArrayList<>();
            while(j<edges.length&&edges[j][2]==edges[i][2]){
                int edge[]=edges[j];
                int start=edge[0],end=edge[1];
                int mx = maxs[start]+1;
                list.add(new int[]{end,mx});
                res=Math.max(res,mx);
                j++;
            }

            for(int pair[]:list){
                maxs[pair[0]]=Math.max(maxs[pair[0]],pair[1]);
            }
            i=j-1;
        }
        out.println(res);
    }






}
