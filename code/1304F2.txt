#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <list>
using namespace std;
using ll = long long;

#define pb push_back
#define f first
#define se second
#define ve vector
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; i--)

// Some predefined templates
template <typename T>
ostream &operator<<(ostream &out, const vector<T> &a)
{
  out << "[";
  bool first = true;
  for (auto v : a)
  {
    out << (first ? "" : ", ");
    out << v;
    first = 0;
  }
  out << "]";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

template <typename U, typename T, class Cmp>
ostream &operator<<(ostream &out, const unordered_map<U, T, Cmp> &a)
{
  out << "{";
  bool first = true;
  for (auto &p : a)
  {
    out << (first ? "" : ", ");
    out << p.first << ":" << p.second;
    first = 0;
  }
  out << "}";
  return out;
}

ll gcd(ll x, ll y)
{
  return (y == 0 ? x : gcd(y, x % y));
}
ll lcm(ll x, ll y)
{
  return x * y / gcd(x, y);
}

int to_int(string &s)
{
  int res = 0;
  for (char c : s)
  {
    res = res * 10 + (c - '0');
  }
  return res;
}

int MOD = 998244353;
int mod = 1000000007;




int pre[55][20000 + 10];
int get(int i, int l, int r) {
  if(l > r) {
    return 0;
  }
  if(l == 0) {
    return pre[i][r];
  }
  return pre[i][r] - pre[i][l - 1];
}


void solve(ve<ve<int>>& a, int k) {

  memset(pre, 0, sizeof(pre));
  int n = a.size(), m = a[0].size();
  FOR(i, 0, n) {
    int sum = 0;
    FOR(j, 0, m) {
      sum += a[i][j];
      pre[i][j] = sum;
    }
  }

  ll dp[55][20000 + 10];
  memset(dp, 0, sizeof(dp));

  //first row
  FOR(i, 0, m) {
    ll sum = get(0, i, min(m - 1, i + k - 1));
    if(n > 1) {
      sum += get(1, i, min(m - 1, i + k - 1));
    }
    dp[0][i] = sum;
  }


  ve<ll> left(m);
  ve<ll> right(m);
  FOR(i, 0, m) {
    if(i == 0) {
      left[i] = dp[0][i];
    } else {
      left[i] = max(left[i - 1], dp[0][i]);
    }
  }
  RFOR(i, m -1, 0) {
    if(i == m - 1) {
      right[i] = dp[0][i];
    } else {
      right[i] = max(right[i + 1], dp[0][i]);
    }
  }

  FOR(i, 1, n) {
    list<ve<ll>> mono;
    FOR(j, 0, m) {
      ll mx = 0;
      ll sum = 0;
      if(i + 1 < n) {
        sum += get(i + 1,j, min(m - 1, j + k - 1));
      }

      
      //add
      ll add = dp[i - 1][j] + get(i, j + k, m - 1);
      while(mono.size() > 0) {
        ve<ll> back = mono.back();
        if(add >= back[1]) {
          mono.pop_back();
        } else {
          break;
        }
      }
      mono.push_back({j, add});
      // mono queue remove invalid element
      while(mono.size() > 0) {
        ve<ll> front = mono.front();
        if(j - (int)(front[0]) >= k) {
          mono.pop_front();
        } else {
          break;
        }
      }
      if(mono.size() > 0) {
        ve<ll> front = mono.front();
        int index = (int)(front[0]);
        ll du = get(i, j, min(m - 1, index + k - 1));
        mx = max(mx, dp[i - 1][index] + sum - du + get(i, j, min(m - 1, j + k - 1)));
        
        /*if(i == 1 && j == 1) {
            cout << "index  " << front << endl;
        }*/
      }
      

      if(j - k >= 0) {
        mx = max(mx, left[j - k] + sum + get(i, j, min(m - 1, j + k - 1)));
      }
      if(j + k < m) {
        mx = max(mx, right[j + k] + sum + get(i, j, min(m - 1, j + k - 1)));
      }
      dp[i][j] = mx;
    }

    mono.clear();
    RFOR(j, m - 1, 0) {
      ll mx = 0;
      ll sum = 0;
      if(i + 1 < n) {
        sum += get(i + 1, j, min(m - 1, j + k - 1));
      }

      //add
      ll add = dp[i - 1][j] + get(i, 0, j - 1);
      while(mono.size() > 0) {
        ve<ll> back = mono.back();
        if(add >= back[1]) {
          mono.pop_back();
        } else {
          break;
        }
      }

      mono.push_back({j, add});
      // mono queue remove invalid element
      while(mono.size() > 0) {
        ve<ll> front = mono.front();
        if((int)(front[0]) - j >= k) {
          mono.pop_front();
        } else {
          break;
        }
      }

      if(mono.size() > 0) {
        ve<ll> front = mono.front();
        int index = (int)(front[0]);
        ll du = get(i, index, min(m - 1, j + k - 1));
        mx = max(mx, dp[i - 1][index] + sum - du + get(i, j, min(m - 1, j + k - 1)));
      }
      dp[i][j] = max(dp[i][j], mx);
    }



    FOR(j, 0, m) {
      if(j == 0) {
        left[j] = dp[i][j];
      } else {
        left[j] = max(left[j - 1], dp[i][j]);
      }
    }
    RFOR(j, m -1, 0) {
      if(j == m - 1) {
        right[j] = dp[i][j];
      } else {
        right[j] = max(right[j + 1], dp[i][j]);
      }
    }

  }
  
  /*FOR(i, 0, n) {
      FOR(j, 0, m) {
          cout << dp[i][j] << " ";
      } cout << endl;
  }*/
  
  ll res = 0;
  FOR(i, 0, m) {
    res = max(res, dp[n - 1][i]);
  }
  cout << res;
}

int main()
{
  int t = 1;
  //cin >> t;
  while (t--)
  {
    int n, m, k;
    cin >> n >> m >> k;
    ve<ve<int>> a(n, ve<int>(m, 0));
    FOR(i, 0, n) {
      FOR(j, 0, m) {
        cin >> a[i][j];
      }
    }
    solve(a, k);
  }
  return 0;
}
